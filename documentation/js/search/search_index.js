var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.625,1,2.395]],["body/controllers/AppController.html",[0,2.678,1,3.947,2,2.18,3,0.358,4,0.32,5,0.32,6,4.026,7,0.398,8,1.96,9,5.582,10,1.695,11,0.023,12,0.815,13,4.732,14,1.504,15,1.291,16,0.583,17,1.186,18,3.596,19,4.026,20,3.333,21,2.334,22,0.358,23,0.077,24,2.18,25,2.678,26,2.212,27,1.596,28,4.732,29,0.019,30,0.019]],["title/modules/AppModule.html",[31,1.625,32,2.395]],["body/modules/AppModule.html",[1,3.659,2,2.173,3,0.26,4,0.232,5,0.232,11,0.023,16,0.635,17,0.861,18,3.591,19,2.921,20,3.073,21,1.694,22,0.26,23,0.056,29,0.015,30,0.015,31,2.483,32,4.651,33,1.819,34,1.819,35,2.13,36,2.13,37,1.819,38,3.343,39,2.13,40,2.921,41,2.921,42,2.921,43,3.897,44,3.897,45,3.591,46,2.926,47,2.13,48,1.963,49,3.434,50,3.659,51,3.434,52,4.013,53,2.584,54,1.963,55,2.921,56,3.434,57,4.717,58,1.963,59,2.926,60,3.434,61,2.921,62,3.434,63,3.434,64,2.584,65,3.434,66,2.584,67,3.434,68,3.434,69,3.434,70,3.434,71,2.921,72,1.819,73,2.13,74,3.434,75,3.434,76,1.499,77,3.434,78,2.332,79,2.584,80,0.348,81,3.434,82,2.584,83,3.434,84,2.921,85,3.434,86,3.434,87,3.434,88,1.582,89,3.434,90,3.434,91,3.434,92,2.332,93,3.434,94,3.434,95,3.434,96,3.434,97,3.434,98,3.434]],["title/injectables/AppService.html",[18,2.016,99,0.939]],["body/injectables/AppService.html",[3,0.383,4,0.342,5,0.342,7,0.425,8,2.04,9,5.708,11,0.023,12,0.871,14,1.606,15,1.344,16,0.468,17,1.267,18,3.458,22,0.383,23,0.083,27,1.705,29,0.019,30,0.019,99,1.61,100,2.329,101,4.301,102,5.055,103,5.055,104,5.055]],["title/classes/AuditBaseEntity.html",[23,0.058,105,2.654]],["body/classes/AuditBaseEntity.html",[3,0.263,4,0.235,5,0.235,7,0.292,10,2.312,11,0.023,12,1.113,16,0.502,22,0.263,23,0.057,29,0.015,30,0.015,76,1.512,80,0.655,105,3.58,106,1.324,107,4.961,108,2.959,109,2.72,110,3.421,111,1.266,112,5.424,113,5.424,114,5.424,115,3.231,116,4.048,117,3.58,118,4.048,119,1.592,120,4.614,121,4.758,122,3.478,123,4.614,124,3.478,125,4.758,126,3.478,127,3.365,128,2.959,129,4.081,130,1.434,131,2.959,132,1.605,133,4.048,134,5.832,135,3.478,136,2.959,137,2.959,138,3.231,139,3.478,140,0.821,141,1.843,142,2.362,143,2.959,144,3.478,145,2.959,146,2.959,147,3.478,148,2.617,149,4.961,150,4.961,151,1.715,152,2.959,153,3.478,154,3.478,155,3.478,156,2.959,157,3.478,158,2.959,159,3.478,160,3.478]],["title/injectables/AuditSubscriber.html",[99,0.939,161,2.654]],["body/injectables/AuditSubscriber.html",[3,0.214,4,0.191,5,0.191,7,0.238,8,1.388,11,0.024,12,1.017,14,1.691,16,0.524,17,0.71,22,0.214,23,0.046,24,1.304,25,3.048,26,2.025,27,1.795,29,0.013,30,0.013,58,1.618,78,1.922,80,0.492,99,1.095,100,1.304,110,3.304,111,1.095,119,1.335,130,1.077,132,0.955,140,0.971,151,1.396,161,3.096,162,2.408,163,5.322,164,4.114,165,5.322,166,5.322,167,4.114,168,2.83,169,3.076,170,4.114,171,1.736,172,1.215,173,4.114,174,5.322,175,2.83,176,2.83,177,4.81,178,2.83,179,3.225,180,2.83,181,4.114,182,2.83,183,1.618,184,1.304,185,1.388,186,4.114,187,4.114,188,4.114,189,4.114,190,4.114,191,2.83,192,4.114,193,1.756,194,2.83,195,1.922,196,2.83,197,2.83,198,2.83,199,2.83,200,4.114,201,2.83,202,2.83,203,2.408,204,2.025,205,2.83,206,2.13,207,2.13,208,2.03,209,2.83,210,2.408,211,2.83,212,2.83,213,2.83,214,2.83,215,4.784,216,4.847,217,2.83,218,2.83,219,2.83,220,2.83]],["title/controllers/AuthController.html",[0,1.625,221,2.395]],["body/controllers/AuthController.html",[0,1.136,2,1.136,3,0.281,4,0.167,5,0.167,7,0.207,8,1.253,10,1.782,11,0.023,12,0.858,14,1.581,16,0.555,17,0.618,22,0.187,23,0.04,26,0.939,27,2.107,29,0.012,30,0.012,66,1.855,71,2.098,76,1.42,80,0.454,119,1.564,130,1.106,169,2.767,171,1.782,172,1.247,185,1.253,193,1.53,221,2.523,222,2.098,223,1.855,224,2.098,225,3.715,226,3.025,227,4.233,228,4.773,229,3.803,230,2.466,231,2.466,232,2.796,233,3.715,234,4.069,235,3.075,236,5.992,237,5.61,238,2.466,239,2.098,240,3.481,241,3.649,242,2.466,243,2.466,244,2.796,245,5.61,246,3.954,247,2.466,248,2.466,249,2.773,250,2.466,251,2.466,252,2.466,253,2.466,254,2.466,255,2.098,256,2.466,257,3.744,258,3.161,259,3.161,260,2.466,261,2.466,262,2.523,263,2.466,264,3.161,265,2.098,266,2.098,267,2.098,268,3.715,269,4.976,270,2.098,271,2.555,272,2.098,273,2.098,274,2.523,275,2.466,276,2.098,277,2.466,278,4.541,279,5.217,280,3.803,281,2.466,282,1.136,283,3.036,284,2.098,285,2.466,286,2.466,287,2.466,288,1.53,289,2.466,290,2.466,291,2.466,292,3.803,293,4.233,294,3.175,295,4.47,296,2.466,297,2.466,298,2.466,299,2.098,300,2.466,301,2.466,302,2.466,303,2.466,304,2.466,305,3.715,306,2.466]],["title/modules/AuthModule.html",[31,1.625,43,2.189]],["body/modules/AuthModule.html",[2,2.307,3,0.284,4,0.253,5,0.253,11,0.023,16,0.634,17,0.94,20,3.187,21,1.85,22,0.284,23,0.061,29,0.016,30,0.016,31,2.597,33,1.987,34,1.987,35,2.327,36,2.327,37,1.987,38,3.497,39,3.497,43,4.28,45,3.686,46,3.107,47,2.327,48,2.144,50,3.828,52,4.796,53,2.822,54,2.144,55,3.191,78,2.547,79,2.822,221,3.828,271,3.971,272,3.191,307,3.191,308,3.75,309,3.191,310,3.191,311,4,312,3.75,313,3.75,314,2.822,315,5.007,316,2.547,317,2.144,318,3.191,319,3.191,320,3.75,321,3.75,322,3.75,323,3.75,324,3.191,325,3.191,326,3.75,327,3.75,328,3.75]],["title/injectables/AuthService.html",[99,0.939,271,2.016]],["body/injectables/AuthService.html",[3,0.137,4,0.123,5,0.123,7,0.153,8,0.987,11,0.023,12,0.987,14,1.773,15,1.398,16,0.553,17,0.455,20,2.753,21,0.896,22,0.137,23,0.03,24,1.349,25,2.928,26,1.604,27,2.045,29,0.009,30,0.009,54,1.038,73,2.615,76,0.93,80,0.566,88,2.276,99,0.779,100,0.837,119,1.166,127,1.127,130,1.301,132,0.613,140,1.432,141,0.962,151,0.896,169,2.28,171,1.998,172,1.399,179,1.551,184,2.491,185,1.559,193,1.127,203,1.545,204,2.419,206,1.367,208,1.813,215,2.766,226,3.071,227,2.49,228,2.49,229,2.49,239,2.49,240,3.065,241,3.367,246,1.987,249,2.615,255,2.49,257,1.367,259,1.545,271,1.673,273,1.545,314,1.367,317,2.642,318,1.545,319,1.545,324,1.545,329,1.545,330,2.927,331,4.215,332,2.927,333,2.927,334,2.927,335,2.927,336,1.816,337,2.437,338,5.196,339,3.676,340,3.172,341,1.816,342,2.927,343,4.622,344,1.816,345,1.813,346,1.545,347,1.816,348,1.816,349,2.615,350,1.816,351,1.816,352,1.816,353,1.816,354,2.927,355,1.816,356,1.816,357,1.816,358,1.816,359,1.816,360,2.927,361,1.816,362,1.707,363,1.816,364,1.367,365,1.545,366,1.545,367,1.127,368,1.816,369,2.927,370,1.545,371,1.816,372,1.816,373,2.615,374,1.816,375,1.233,376,1.545,377,1.816,378,1.816,379,1.816,380,2.927,381,1.816,382,1.816,383,2.49,384,1.816,385,1.367,386,3.172,387,1.816,388,1.545,389,3.932,390,4.203,391,1.545,392,1.816,393,1.816,394,1.816,395,2.927,396,1.816,397,1.816,398,1.816,399,1.816,400,1.816,401,3.065,402,1.816,403,1.816,404,1.816,405,1.816,406,2.927,407,1.816,408,1.816,409,1.816,410,1.349,411,1.816,412,1.816,413,2.927,414,1.545,415,1.816,416,1.816,417,1.816,418,2.927,419,3.676,420,1.816,421,1.816,422,1.545,423,1.816,424,1.545,425,1.816,426,1.545,427,1.367,428,1.816,429,1.816,430,1.816,431,1.545,432,1.816,433,1.545,434,1.816,435,1.816,436,1.816,437,1.367,438,1.545,439,1.816,440,1.816,441,2.927,442,1.816,443,1.816,444,1.816,445,1.545,446,1.545,447,1.816]],["title/classes/BaseEntity.html",[23,0.058,110,1.869]],["body/classes/BaseEntity.html",[3,0.292,4,0.261,5,0.261,7,0.324,10,2.178,11,0.023,12,1.048,16,0.357,22,0.292,23,0.063,29,0.016,30,0.016,76,1.933,80,0.683,106,1.468,110,2.703,111,1.357,115,3.881,116,4.863,117,4.301,118,4.863,123,4.34,127,4.032,128,3.281,129,4.89,130,1.495,131,4.34,132,2.051,133,5.175,136,3.281,137,4.34,138,4.13,140,1.204,141,2.703,142,2.619,143,4.34,145,3.281,146,4.34,151,1.902,448,3.281,449,3.857,450,3.857,451,3.857,452,3.857,453,3.839,454,5.101,455,5.101,456,5.101,457,3.857]],["title/classes/CreateUserDto.html",[23,0.058,458,2.016]],["body/classes/CreateUserDto.html",[3,0.186,4,0.166,5,0.166,7,0.206,10,2.234,11,0.023,12,1.075,15,1.481,16,0.413,22,0.186,23,0.06,29,0.012,30,0.012,80,0.633,88,2.453,106,0.933,111,0.984,119,1.611,130,1.291,132,1.673,140,0.873,172,1.645,179,1.959,235,2.874,262,2.511,282,1.129,294,2.821,362,2.479,375,4.236,410,2.453,458,2.114,459,5.391,460,1.844,461,3.789,462,4.529,463,4.529,464,4.529,465,4.529,466,4.694,467,3.698,468,3.698,469,3.901,470,3.698,471,5.324,472,2.451,473,3.698,474,3.698,475,2.451,476,2.451,477,3.078,478,2.451,479,4.961,480,2.451,481,4.22,482,3.698,483,3.698,484,2.451,485,2.451,486,3.698,487,2.451,488,2.085,489,2.451,490,3.698,491,2.451,492,3.698,493,3.698,494,2.451,495,4.006,496,3.369,497,2.451,498,2.451,499,2.453,500,2.085,501,2.451,502,4.768,503,3.146,504,3.733,505,2.085,506,4.501,507,1.844,508,1.401,509,1.664,510,2.451,511,2.085,512,2.085,513,2.085,514,3.615,515,3.146,516,2.451,517,3.698,518,1.844]],["title/classes/DateHelper.html",[23,0.058,519,2.654]],["body/classes/DateHelper.html",[3,0.105,4,0.094,5,0.094,7,0.116,8,0.789,11,0.023,12,1.002,14,1.847,15,1.121,22,0.105,23,0.023,27,2.014,29,0.007,30,0.007,80,0.58,106,0.527,127,4.427,130,1.271,132,0.789,140,1.426,156,2.584,158,3.683,171,2.048,172,1.434,184,1.078,185,2.038,204,2.419,388,1.178,389,1.99,390,1.178,391,1.178,446,3.037,519,1.76,520,1.178,521,5.832,522,2.34,523,2.34,524,2.34,525,2.34,526,2.34,527,2.34,528,2.34,529,2.34,530,2.34,531,2.34,532,2.34,533,2.34,534,2.34,535,2.34,536,2.34,537,3.57,538,1.385,539,6.56,540,4.329,541,4.844,542,2.34,543,3.99,544,1.385,545,4.329,546,2.34,547,3.99,548,1.385,549,2.34,550,2.34,551,4.844,552,1.385,553,2.34,554,3.57,555,2.34,556,3.57,557,3.57,558,3.038,559,3.038,560,3.002,561,2.34,562,3.57,563,2.34,564,1.385,565,4.609,566,4.609,567,3.57,568,3.57,569,2.34,570,2.34,571,2.34,572,2.34,573,1.385,574,2.34,575,2.34,576,1.385,577,3.038,578,2.34,579,2.34,580,2.34,581,1.385,582,2.34,583,1.892,584,2.709,585,3.57,586,2.34,587,1.385,588,4.844,589,2.34,590,3.57,591,3.57,592,2.34,593,2.34,594,2.34,595,1.385,596,2.34,597,2.34,598,3.037,599,3.57,600,2.34,601,1.385,602,2.34,603,2.34,604,2.34,605,1.385,606,2.34,607,2.34,608,2.34,609,2.34,610,2.34,611,2.34,612,2.34,613,1.99,614,1.385,615,2.34,616,2.34,617,2.34,618,1.385,619,3.57,620,2.34,621,3.57,622,1.385,623,2.34,624,1.385,625,4.329,626,3.038,627,4.75,628,4.329,629,3.038,630,3.038,631,3.99,632,3.038,633,2.34,634,1.385,635,1.385,636,1.385,637,1.385,638,1.385,639,4.438,640,3.99,641,1.385,642,1.385,643,1.385,644,1.385,645,1.385,646,1.385,647,1.385,648,1.385,649,2.34,650,2.34,651,2.34,652,2.34,653,2.34,654,2.34,655,2.34,656,1.385,657,2.34,658,1.385,659,1.385,660,1.385,661,1.385,662,1.385,663,1.385,664,1.385,665,1.385,666,1.385]],["title/classes/HttpExceptionFilter.html",[23,0.058,667,2.654]],["body/classes/HttpExceptionFilter.html",[3,0.318,4,0.284,5,0.284,7,0.353,8,1.82,11,0.023,12,0.725,14,1.336,16,0.5,17,1.054,22,0.318,23,0.069,29,0.017,30,0.017,80,0.427,82,4.485,106,1.601,130,0.934,169,2.662,171,1.506,172,1.054,177,3.578,185,1.418,193,2.609,195,3.665,204,2.475,206,3.165,207,3.165,210,5.071,241,2.86,294,2.86,427,3.165,477,2.609,584,2.856,667,4.061,668,4.592,669,3.578,670,5.96,671,5.397,672,6.288,673,6.288,674,4.206,675,4.206,676,4.206,677,3.578,678,4.206,679,4.206,680,4.206,681,4.206,682,6.288,683,4.206,684,4.206,685,3.165,686,4.206,687,4.206,688,3.165]],["title/interfaces/IUser.html",[349,2.189,689,1.19]],["body/interfaces/IUser.html",[3,0.366,4,0.326,5,0.326,7,0.406,11,0.022,15,1.575,22,0.366,29,0.019,30,0.019,80,0.671,111,1.566,130,1.468,140,1.499,208,3.259,349,3.652,362,2.676,410,3.045,689,1.629,690,2.559,691,4.109]],["title/injectables/JwtAuthGuard.html",[59,2.189,99,0.939]],["body/injectables/JwtAuthGuard.html",[3,0.291,4,0.26,5,0.26,7,0.323,8,1.718,11,0.023,12,0.984,14,1.619,16,0.563,17,0.965,22,0.291,23,0.063,24,1.773,26,1.465,27,1.925,29,0.016,30,0.016,58,2.2,59,3.16,76,1.223,80,0.517,99,1.355,100,1.773,109,2.912,119,1.492,130,1.269,171,2.045,172,1.431,184,1.773,185,1.298,204,1.465,246,2.613,262,2.613,284,3.274,288,2.387,316,2.613,364,3.833,373,2.387,376,3.274,692,4.573,693,3.274,694,5.093,695,5.093,696,5.093,697,3.274,698,4.887,699,3.848,700,5.093,701,4.127,702,3.848,703,2.895,704,5.093,705,3.848,706,5.709,707,3.848,708,2.895,709,3.274,710,4.333,711,3.848,712,2.895,713,3.848,714,3.848,715,3.848]],["title/injectables/JwtStrategy.html",[99,0.939,311,2.189]],["body/injectables/JwtStrategy.html",[3,0.289,4,0.258,5,0.258,7,0.32,8,1.707,11,0.023,12,0.872,14,1.211,16,0.6,17,0.956,20,3.432,21,1.88,22,0.289,23,0.062,24,2.332,25,2.332,26,1.926,27,1.286,29,0.016,30,0.016,80,0.514,99,1.347,100,1.756,109,2.893,119,1.195,130,1.345,171,1.813,172,1.269,185,1.286,204,1.926,208,2.497,226,2.803,244,2.868,249,2.365,311,3.14,316,2.588,325,3.243,337,3.26,349,3.756,362,2.05,364,3.809,366,3.243,370,3.243,373,2.365,401,2.365,410,2.332,438,4.306,514,2.588,709,3.243,716,3.243,717,5.062,718,5.062,719,3.812,720,3.812,721,5.062,722,3.812,723,3.812,724,3.812,725,3.243,726,3.812,727,3.812,728,3.812,729,3.812,730,3.812,731,3.812,732,3.812]],["title/classes/LoginDto.html",[23,0.058,240,2.189]],["body/classes/LoginDto.html",[3,0.338,4,0.302,5,0.302,7,0.376,10,2.01,11,0.023,12,0.967,15,1.429,16,0.52,22,0.338,23,0.092,29,0.018,30,0.018,80,0.569,88,3.052,106,1.702,111,1.493,119,1.518,235,2.586,240,3.482,282,2.06,362,2.683,466,4.222,469,3.676,488,3.804,502,4.615,503,4.774,504,4.615,505,3.804,508,2.556,512,3.804,513,3.804,733,3.804,734,4.472,735,4.472,736,4.472,737,4.472]],["title/controllers/MailController.html",[0,1.625,738,2.395]],["body/controllers/MailController.html",[0,1.933,2,1.933,3,0.318,4,0.283,5,0.283,7,0.353,8,1.817,10,1.502,11,0.023,12,0.723,14,1.333,16,0.616,17,1.052,22,0.318,23,0.068,24,1.933,25,2.483,26,2.051,29,0.017,30,0.017,64,3.157,223,3.157,226,2.936,283,3.659,362,2.182,401,2.603,598,3.569,738,3.659,739,3.569,740,4.195,741,6.282,742,4.195,743,4.195,744,3.403,745,3.569,746,5.065,747,2.603,748,2.849,749,4.195,750,2.849,751,2.849,752,2.849,753,4.195,754,4.195,755,4.195,756,4.195,757,4.195,758,4.195,759,4.195,760,3.157,761,4.195,762,4.195,763,4.195,764,4.195,765,4.195,766,4.195,767,4.195,768,3.569,769,3.157,770,4.195]],["title/modules/MailModule.html",[31,1.625,44,2.189]],["body/modules/MailModule.html",[2,2.362,3,0.294,4,0.263,5,0.263,11,0.023,16,0.615,17,0.974,20,3.232,21,1.916,22,0.294,23,0.063,29,0.016,30,0.016,31,2.643,33,2.058,34,2.058,35,2.41,36,2.41,37,2.058,38,3.559,39,2.41,44,4.04,46,3.18,47,2.41,48,2.221,50,2.638,76,1.823,78,2.638,79,2.923,82,2.923,84,3.305,119,0.917,185,1.31,224,3.305,226,1.916,422,3.305,426,3.305,427,2.923,514,3.48,738,3.895,744,3.723,745,3.305,747,3.18,748,2.638,768,3.305,771,3.305,772,3.305,773,3.884,774,3.884,775,3.884,776,5.125,777,3.884,778,3.305,779,3.884,780,3.884,781,3.884,782,3.884,783,3.884,784,3.884,785,3.884,786,3.884,787,3.884,788,3.884,789,3.884,790,2.638,791,3.884,792,3.884]],["title/injectables/MailService.html",[99,0.939,744,2.016]],["body/injectables/MailService.html",[3,0.359,4,0.321,5,0.321,11,0.023,12,0.818,16,0.583,17,1.19,20,3.682,21,2.341,22,0.359,23,0.077,24,2.683,25,2.683,26,2.216,29,0.019,30,0.019,80,0.482,99,1.549,100,2.187,130,1.054,171,1.7,172,1.19,744,3.328,746,5.836,747,2.944,748,3.223,793,4.037,794,4.746,795,4.746]],["title/interfaces/Pagination.html",[689,1.19,796,1.74]],["body/interfaces/Pagination.html",[3,0.329,4,0.293,5,0.293,7,0.365,11,0.023,15,1.459,16,0.51,22,0.482,29,0.018,30,0.018,72,2.3,80,0.559,111,1.465,140,1.609,345,2.141,499,2.538,583,3.205,689,2.146,690,2.3,796,2.716,797,2.693,798,3.637,799,4.32,800,3.637,801,2.481,802,3.205,803,2.947,804,2.481,805,3.148,806,2.481,807,2.481,808,2.3,809,2.481,810,2.481,811,2.693,812,2.481,813,2.481,814,2.947,815,2.947,816,2.947,817,2.947,818,2.947]],["title/classes/PaginationDto.html",[23,0.058,819,2.016]],["body/classes/PaginationDto.html",[3,0.182,4,0.162,5,0.162,7,0.202,10,1.989,11,0.023,12,0.957,15,1.172,16,0.455,22,0.333,23,0.08,29,0.018,30,0.012,72,2.33,73,3.273,76,1.56,80,0.649,106,0.914,111,0.969,115,3.582,119,0.567,130,0.809,132,2.241,140,1.465,172,1.392,184,2.945,232,2.739,235,2.738,282,1.106,294,1.272,362,1.474,410,1.106,469,3.174,496,3.333,499,2.026,506,4.579,507,1.806,508,1.372,518,1.806,560,4.579,769,1.806,790,2.472,798,2.081,801,1.372,802,3.149,806,1.372,807,2.514,809,3.298,810,3.016,812,3.479,813,2.514,819,2.081,820,3.298,821,1.63,822,3.582,823,4.724,824,2.472,825,2.4,826,2.4,827,3.097,828,4.176,829,3.097,830,3.097,831,2.4,832,2.4,833,2.4,834,2.4,835,3.097,836,2.739,837,3.097,838,3.097,839,3.097,840,2.4,841,2.4,842,3.097,843,4.176,844,2.4,845,2.4,846,3.741,847,3.097,848,3.097,849,3.693,850,3.097,851,3.693,852,2.4,853,2.4,854,3.741,855,2.042,856,2.042,857,3.693,858,3.097,859,4.176,860,3.741,861,1.806,862,5.177,863,2.739,864,2.042,865,3.097,866,3.097,867,3.097,868,1.489,869,3.097,870,3.097,871,1.63,872,1.63,873,3.097,874,2.042,875,2.042,876,2.042]],["title/interfaces/PaginationMeta.html",[689,1.19,800,2.016]],["body/interfaces/PaginationMeta.html",[3,0.311,4,0.278,5,0.278,7,0.345,11,0.023,15,1.435,16,0.493,22,0.472,29,0.017,30,0.017,72,2.178,80,0.655,111,1.415,140,1.695,345,2.027,499,2.45,583,2.178,689,2.102,690,2.178,796,2.027,797,2.55,798,2.35,799,2.791,800,3.37,801,2.35,802,3.124,803,2.791,804,2.35,805,3.04,806,2.35,807,2.35,808,2.178,809,2.35,810,2.35,811,2.55,812,2.35,813,2.35,814,4.233,815,4.233,816,4.233,817,4.233,818,4.233]],["title/interfaces/PaginationOptions.html",[689,1.19,808,1.869]],["body/interfaces/PaginationOptions.html",[3,0.291,4,0.259,5,0.259,7,0.323,11,0.023,15,1.539,16,0.471,22,0.46,29,0.016,30,0.016,72,3.217,80,0.672,111,1.353,140,1.635,172,1.767,345,1.894,499,2.343,583,2.034,689,2.048,690,2.034,796,1.894,797,2.382,798,2.194,799,2.607,800,2.907,801,2.194,802,3.562,803,2.607,804,2.194,805,3.47,806,2.194,807,2.194,808,2.694,809,3.47,810,3.47,811,3.767,812,3.47,813,3.47,814,2.607,815,2.607,816,2.607,817,2.607,818,2.607]],["title/classes/PasswordHelper.html",[23,0.058,367,2.189]],["body/classes/PasswordHelper.html",[3,0.3,4,0.268,5,0.268,7,0.334,8,1.753,11,0.023,12,0.896,14,1.652,15,1.522,16,0.368,22,0.3,23,0.065,27,1.955,29,0.017,30,0.017,73,3.226,80,0.528,88,3.019,106,1.511,130,1.155,132,1.339,140,1.227,171,1.862,172,1.303,179,3.471,184,1.829,185,1.339,226,3.232,363,3.817,367,3.226,373,2.463,375,2.696,514,2.696,521,5.574,877,3.377,878,5.797,879,5.797,880,3.97,881,5.233,882,3.97,883,3.97,884,6.151,885,3.97,886,4.423,887,3.97,888,3.97,889,3.97,890,3.97]],["title/entities/RefreshToken.html",[183,2.016,317,2.016]],["body/entities/RefreshToken.html",[3,0.293,4,0.261,5,0.261,7,0.481,10,2.267,11,0.023,12,1.091,15,1.135,16,0.53,22,0.293,23,0.063,29,0.016,30,0.016,76,1.935,80,0.66,92,2.625,109,2.21,110,2.707,111,1.36,119,1.566,120,3.289,127,3.17,129,3.845,130,1.272,132,1.304,138,3.469,140,1.206,142,2.625,148,2.909,149,4.347,150,4.347,151,1.907,152,3.289,183,2.21,208,2.823,215,4.764,317,2.921,445,5.18,453,4.581,613,4.347,891,5.533,892,3.289,893,5.723,894,5.109,895,3.866,896,5.109,897,3.866,898,3.866,899,3.866,900,3.866,901,3.866,902,3.866,903,3.866,904,3.866,905,3.866]],["title/classes/RefreshTokenDto.html",[23,0.058,906,2.654]],["body/classes/RefreshTokenDto.html",[3,0.362,4,0.324,5,0.324,7,0.402,10,1.715,11,0.023,12,0.825,15,1.301,16,0.542,22,0.362,23,0.096,29,0.019,30,0.019,80,0.486,106,1.822,111,1.558,235,2.206,246,3.975,257,4.405,282,2.206,317,3.615,466,3.602,469,3.346,502,4.405,504,4.405,508,2.737,857,4.405,906,4.405,907,4.98,908,4.073,909,4.787,910,4.787,911,4.787]],["title/interfaces/Response.html",[241,1.869,689,1.19]],["body/interfaces/Response.html",[3,0.224,4,0.2,5,0.2,7,0.248,11,0.024,15,1.402,16,0.533,17,0.741,22,0.411,23,0.048,25,1.361,26,1.124,27,2.249,29,0.014,30,0.014,58,1.688,76,0.939,80,0.551,99,1.129,111,1.129,132,0.996,140,1.282,141,2.631,169,1.457,179,2.248,185,1.675,195,2.006,204,2.445,234,2.006,241,2.631,288,1.833,345,1.457,385,2.223,386,4.084,477,3.986,583,2.631,584,4.187,685,5.019,688,3.737,689,0.996,690,1.565,698,3.737,701,2.881,703,2.223,712,2.223,752,2.006,912,1.833,913,4.907,914,3.61,915,3.61,916,3.61,917,2.223,918,2.513,919,2.513,920,2.006,921,2.513,922,2.881,923,2.633,924,2.223,925,2.513,926,3.61,927,2.513,928,2.513,929,2.513,930,2.006,931,2.513,932,2.513,933,4.225,934,3.61,935,2.513,936,2.513,937,3.61,938,2.513,939,2.513,940,2.513,941,2.513,942,2.513,943,2.513,944,2.513,945,2.223,946,2.223,947,2.223,948,3.61,949,2.513,950,3.61,951,3.61,952,2.513,953,3.61,954,2.223,955,2.223,956,2.513,957,2.513,958,2.513,959,2.513]],["title/injectables/TransformInterceptor.html",[99,0.939,930,2.395]],["body/injectables/TransformInterceptor.html",[3,0.215,4,0.192,5,0.192,7,0.239,8,1.391,11,0.023,12,0.837,14,1.311,15,1.258,16,0.524,17,0.712,22,0.403,23,0.046,24,1.309,25,2.238,26,1.081,27,2.233,29,0.013,30,0.013,58,1.624,76,0.903,80,0.493,99,1.098,100,1.309,130,1.079,132,0.958,140,1.258,141,2.573,169,1.401,171,1.739,172,1.218,179,2.186,185,1.638,195,1.929,204,2.422,234,1.929,241,2.186,288,1.762,345,1.401,385,2.137,386,4.011,477,3.664,583,1.505,584,3.62,685,4.864,688,3.655,689,0.958,697,2.416,698,4.444,701,3.62,703,3.104,712,2.137,752,1.929,912,1.762,913,4.585,914,3.509,915,4.535,916,4.132,917,2.137,918,2.416,919,2.416,920,1.929,921,2.416,922,2.801,923,2.559,924,2.137,925,2.416,926,3.509,927,2.416,928,2.416,929,2.416,930,2.801,931,4.132,932,4.132,933,4.132,934,3.509,935,2.416,936,2.416,937,3.509,938,2.416,939,2.416,940,2.416,941,2.416,942,2.416,943,2.416,944,2.416,945,2.137,946,2.137,947,2.137,948,3.509,949,2.416,950,3.509,951,3.509,952,3.509,953,3.509,954,2.137,955,2.137,956,2.416,957,2.416,958,2.416,959,2.416,960,4.125,961,2.84,962,2.84,963,2.84,964,2.84]],["title/classes/UpdateUserDto.html",[23,0.058,965,2.189]],["body/classes/UpdateUserDto.html",[3,0.384,4,0.343,5,0.343,11,0.023,16,0.561,22,0.384,23,0.083,29,0.019,30,0.019,88,2.793,106,1.93,109,3.465,204,2.307,282,2.337,458,2.899,460,3.816,965,3.76,966,4.314,967,6.061,968,5.071,969,3.816,970,3.816]],["title/entities/User.html",[119,0.833,183,2.016]],["body/entities/User.html",[3,0.224,4,0.2,5,0.2,7,0.249,10,2.366,11,0.023,12,1.138,15,1.526,16,0.394,22,0.377,23,0.048,29,0.014,30,0.014,76,2.121,80,0.689,88,2.293,92,2.013,109,1.695,110,2.254,111,1.132,119,1.284,130,1.106,132,1.834,138,4.069,140,1.004,142,3.379,148,2.231,151,1.462,172,1.636,179,2.254,183,1.695,208,2.455,294,2.636,362,2.015,410,2.293,453,5.067,461,4.233,462,4.233,463,4.233,464,4.233,465,4.233,495,4.332,496,4.431,499,2.653,515,2.522,868,2.64,871,2.889,872,2.889,971,2.231,972,5.437,973,2.964,974,4.254,975,2.964,976,2.964,977,2.964,978,4.976,979,2.964,980,2.964,981,2.964,982,2.964,983,2.964,984,2.964,985,2.964,986,2.964,987,3.619,988,3.619,989,2.964,990,2.964,991,2.964]],["title/interfaces/UserFilter.html",[689,1.19,805,2.016]],["body/interfaces/UserFilter.html",[3,0.321,4,0.286,5,0.286,7,0.356,11,0.023,12,0.731,15,1.525,16,0.502,22,0.477,29,0.017,30,0.017,72,2.246,80,0.55,111,1.443,140,1.6,172,1.581,345,2.676,499,2.906,583,2.246,689,2.127,690,2.246,796,2.091,797,2.63,798,2.423,799,2.878,800,3.101,801,2.423,802,3.17,803,2.878,804,2.423,805,3.42,806,3.605,807,3.605,808,2.246,809,2.423,810,2.423,811,2.63,812,2.423,813,2.423,814,2.878,815,2.878,816,2.878,817,2.878,818,2.878,992,4.239,993,4.239]],["title/classes/UserFilterDto.html",[23,0.058,822,2.395]],["body/classes/UserFilterDto.html",[3,0.209,4,0.186,5,0.186,7,0.232,10,1.446,11,0.023,12,0.696,15,1.168,16,0.487,22,0.362,23,0.086,29,0.017,30,0.013,72,1.461,73,2.963,76,1.858,80,0.613,106,1.05,111,1.074,115,3.243,119,0.651,130,0.613,132,1.971,140,1.38,172,1.318,184,2.782,232,2.076,235,2.853,282,1.271,294,2.139,362,1.117,410,1.861,469,3.341,496,3.57,499,2.578,500,2.347,506,4.753,507,2.076,508,1.577,518,2.076,560,4.21,769,3.038,790,1.873,798,1.577,801,1.577,802,2.785,806,2.73,807,3.005,809,2.73,810,2.308,812,3.452,813,1.577,819,1.577,820,2.73,821,1.873,822,3.799,823,3.435,824,1.873,827,2.347,828,3.435,829,2.347,830,2.347,835,2.347,836,2.076,837,2.347,838,2.347,839,2.347,842,2.347,843,3.435,846,3.435,847,2.347,848,2.347,849,3.594,850,2.347,851,3.594,854,4.064,855,2.347,856,2.347,857,3.956,858,3.435,859,4.973,860,4.064,861,2.076,862,5.374,863,3.956,864,3.435,865,4.473,866,4.473,867,4.473,868,1.711,869,4.064,870,3.435,871,1.873,872,1.873,873,3.435,874,2.347,875,2.347,876,2.347,994,2.758,995,4.038,996,2.758,997,2.758]],["title/controllers/UsersController.html",[0,1.625,998,2.395]],["body/controllers/UsersController.html",[0,0.896,2,0.896,3,0.147,4,0.131,5,0.131,7,0.163,8,1.042,10,1.912,11,0.023,12,0.92,14,1.697,16,0.553,17,0.487,22,0.147,23,0.032,26,0.74,27,1.801,29,0.01,30,0.01,59,1.206,61,1.654,80,0.542,119,1.627,130,1.186,140,1.492,141,2.038,169,0.959,171,1.912,172,1.339,185,1.042,204,0.74,208,2.997,223,1.463,226,3.268,234,3.458,235,2.942,249,3.159,264,2.629,265,2.629,266,1.654,267,1.654,270,1.654,274,2.099,276,1.654,278,4.714,279,4.857,280,4.714,282,0.896,288,1.206,292,3.273,293,4.542,294,2.936,337,1.897,363,1.918,401,2.719,431,1.654,437,2.894,458,2.911,509,1.32,692,1.463,750,1.32,751,1.32,752,1.32,796,1.897,804,1.111,819,2.911,820,1.111,863,2.894,868,1.918,945,3.599,946,4.169,947,4.702,954,2.326,955,2.894,965,3.438,969,3.298,970,2.326,998,2.099,999,1.654,1000,3.273,1001,2.629,1002,2.629,1003,3.273,1004,3.729,1005,4.069,1006,1.654,1007,1.944,1008,4.383,1009,1.944,1010,3.091,1011,3.091,1012,1.944,1013,1.944,1014,1.654,1015,1.944,1016,1.944,1017,4.383,1018,1.944,1019,1.654,1020,1.944,1021,1.944,1022,1.944,1023,1.654,1024,1.944,1025,3.091,1026,4.383,1027,3.091,1028,5.092,1029,3.847,1030,1.944,1031,1.654,1032,1.944,1033,5.092,1034,1.944,1035,1.654,1036,1.944,1037,1.944,1038,3.847,1039,1.944,1040,1.654,1041,1.944,1042,1.944,1043,3.091,1044,1.944,1045,1.944,1046,1.944,1047,5.092,1048,3.091,1049,1.463,1050,1.654,1051,1.654,1052,1.654,1053,1.654,1054,1.944,1055,5.092,1056,1.944,1057,1.944,1058,3.847,1059,1.944,1060,1.944,1061,1.944,1062,1.944,1063,1.944,1064,1.944,1065,3.091,1066,1.944,1067,1.944,1068,1.944,1069,1.944,1070,1.944,1071,1.944,1072,1.944,1073,1.944,1074,1.944]],["title/modules/UsersModule.html",[31,1.625,45,2.016]],["body/modules/UsersModule.html",[2,2.577,3,0.337,4,0.301,5,0.301,11,0.023,16,0.613,17,1.115,22,0.337,23,0.073,29,0.018,30,0.018,31,2.819,33,2.356,34,2.356,35,2.759,36,2.759,37,2.356,38,3.795,39,3.795,45,3.917,46,3.47,47,2.759,48,2.542,50,3.02,53,3.346,54,2.542,119,1.05,337,3.512,509,3.02,998,4.154,1050,3.784,1075,3.784,1076,3.784,1077,3.784,1078,4.447,1079,4.447,1080,4.447]],["title/injectables/UsersService.html",[99,0.939,337,1.74]],["body/injectables/UsersService.html",[3,0.159,4,0.142,5,0.142,7,0.176,8,1.106,11,0.024,12,1.031,14,1.858,15,0.898,16,0.565,17,0.526,22,0.159,23,0.034,24,1.512,25,0.966,26,0.798,27,1.774,29,0.01,30,0.01,54,1.199,76,0.666,80,0.593,88,1.512,99,0.873,100,0.966,117,3.958,119,1.242,130,1.329,140,1.554,141,1.111,151,1.034,171,2.094,172,1.466,185,1.854,204,2.277,208,2.711,226,3.39,337,1.618,340,3.439,346,1.784,362,2.13,363,4.021,365,1.784,367,1.301,373,3.41,375,1.424,401,3.711,433,1.784,458,3.142,509,1.424,627,3.041,639,3.438,796,1.034,804,1.199,811,1.301,819,3.007,820,1.199,881,3.438,965,3.529,969,2.469,970,2.469,1000,2.791,1001,2.791,1002,2.791,1003,2.791,1004,2.791,1005,2.791,1006,2.791,1014,2.791,1019,2.791,1023,2.791,1031,2.791,1035,2.791,1040,2.791,1051,1.784,1052,1.784,1053,1.784,1081,1.784,1082,4.57,1083,3.281,1084,2.097,1085,2.097,1086,3.281,1087,2.097,1088,2.097,1089,2.097,1090,3.281,1091,2.097,1092,2.097,1093,2.097,1094,2.097,1095,2.097,1096,2.097,1097,2.097,1098,2.097,1099,2.097,1100,2.097,1101,1.578,1102,1.578,1103,2.097,1104,1.578,1105,2.097,1106,2.097,1107,4.57,1108,4.57,1109,2.097,1110,3.281,1111,3.281,1112,2.097,1113,2.097,1114,2.097,1115,2.097,1116,3.281,1117,4.57,1118,2.097,1119,2.097,1120,4.041,1121,2.097,1122,2.097,1123,2.097,1124,4.041,1125,2.097,1126,2.097,1127,2.097,1128,2.097,1129,2.097]],["title/coverage.html",[1130,3.615]],["body/coverage.html",[0,2.426,1,1.879,5,0.187,6,2.355,11,0.023,18,1.582,23,0.108,29,0.013,30,0.013,37,1.466,59,1.717,80,0.486,99,1.649,101,2.355,105,2.083,107,2.355,108,2.355,110,1.466,119,0.653,161,2.083,162,2.355,183,2.314,185,0.933,221,1.879,222,2.355,240,1.717,241,1.466,271,1.582,274,1.879,283,1.879,311,1.717,317,2.314,329,2.355,337,1.365,349,1.717,367,1.717,448,2.355,458,1.582,459,2.355,460,3.046,519,2.083,520,2.355,627,5.458,667,2.083,668,2.355,669,2.355,689,1.974,691,2.355,692,2.083,693,2.355,708,2.083,716,2.355,733,2.355,738,1.879,739,2.355,744,1.582,750,1.879,751,2.749,793,2.355,796,1.365,797,3.267,800,1.582,805,1.582,808,1.466,819,1.582,820,2.314,821,2.749,822,1.879,824,1.879,877,2.355,891,3.444,892,3.444,906,2.083,907,2.355,908,2.355,912,3.267,920,1.879,922,1.879,923,1.717,924,3.601,930,1.879,965,1.717,966,2.355,971,2.083,998,1.879,999,2.355,1049,2.083,1081,2.355,1101,2.083,1102,2.083,1104,2.083,1130,2.083,1131,2.355,1132,2.768,1133,2.768,1134,5.852,1135,5.266,1136,4.786,1137,2.355,1138,6.322,1139,6.839,1140,3.444,1141,5.852,1142,4.048,1143,4.048,1144,3.444,1145,4.048,1146,4.786,1147,2.355,1148,2.355,1149,3.046,1150,2.355,1151,2.768,1152,2.768,1153,2.355,1154,3.444,1155,4.048,1156,2.355,1157,2.355,1158,2.768,1159,2.768]],["title/dependencies.html",[34,2.246,1160,2.51]],["body/dependencies.html",[11,0.023,17,1.091,21,2.147,23,0.09,29,0.018,30,0.018,34,2.306,54,2.488,58,2.488,64,3.275,66,3.275,151,2.147,193,2.7,244,3.275,282,2.005,299,3.703,314,3.275,316,2.955,508,2.488,725,4.693,747,2.7,748,2.955,861,3.275,886,3.703,917,3.275,1161,4.352,1162,6.056,1163,4.352,1164,5.516,1165,4.352,1166,4.352,1167,4.352,1168,4.352,1169,4.352,1170,4.352,1171,4.352,1172,4.352,1173,4.352,1174,4.352,1175,4.352,1176,4.352,1177,4.352,1178,4.352,1179,4.352,1180,4.352,1181,4.352,1182,4.352,1183,4.352,1184,4.352,1185,4.352,1186,4.352,1187,4.352,1188,4.352,1189,4.352,1190,4.352,1191,4.352,1192,4.352,1193,4.352,1194,4.352]],["title/miscellaneous/enumerations.html",[1195,1.455,1196,3.607]],["body/miscellaneous/enumerations.html",[7,0.394,11,0.023,29,0.018,30,0.018,119,1.544,184,3.272,410,2.664,495,4.35,499,2.664,802,3.063,820,2.681,821,3.926,849,4.35,851,4.35,868,4.058,871,3.926,872,3.926,971,3.53,987,4.918,988,4.918,1149,3.53,1195,2.314,1196,3.991,1197,3.991,1198,4.691,1199,5.781]],["title/miscellaneous/functions.html",[1195,1.455,1200,3.607]],["body/miscellaneous/functions.html",[7,0.43,11,0.022,14,1.627,29,0.019,30,0.019,37,3.449,80,0.519,130,1.137,171,1.833,172,1.283,363,3.176,790,4.139,808,3.229,912,3.176,923,4.038,1104,4.586,1147,4.355,1153,4.355,1195,2.525,1200,4.355,1201,5.119,1202,5.119,1203,4.355,1204,5.119,1205,5.119]],["title/index.html",[7,0.248,1206,2.95,1207,2.95]],["body/index.html",[4,0.209,11,0.022,29,0.014,30,0.014,48,3.472,235,1.423,258,2.627,340,2.324,345,1.523,383,2.627,424,3.727,469,3.166,481,2.627,747,3.96,760,4.168,778,2.627,836,2.324,1130,2.324,1131,3.727,1208,3.088,1209,3.088,1210,5.09,1211,4.38,1212,3.088,1213,3.088,1214,3.088,1215,3.088,1216,4.38,1217,5.09,1218,3.088,1219,3.088,1220,5.539,1221,3.088,1222,6.383,1223,3.088,1224,6.247,1225,3.088,1226,3.088,1227,3.088,1228,4.38,1229,3.088,1230,3.088,1231,5.09,1232,4.38,1233,3.088,1234,3.088,1235,3.088,1236,3.088,1237,3.088,1238,5.539,1239,6.074,1240,4.38,1241,3.088,1242,3.088,1243,3.088,1244,3.088,1245,3.088,1246,6.074,1247,4.38,1248,5.539,1249,3.088,1250,4.38,1251,3.088,1252,4.38,1253,6.074,1254,5.539,1255,3.088,1256,4.38,1257,3.088,1258,3.088,1259,3.088,1260,3.088,1261,5.539,1262,3.088,1263,3.088,1264,3.088,1265,3.088,1266,4.38,1267,3.088,1268,3.088,1269,3.088,1270,3.088,1271,3.088,1272,4.38,1273,3.088,1274,3.088,1275,3.088,1276,4.38,1277,3.088,1278,3.088,1279,4.38,1280,3.088,1281,3.088,1282,3.088,1283,3.088,1284,3.088,1285,3.088,1286,3.088,1287,3.088,1288,4.38,1289,3.088,1290,3.088,1291,3.088,1292,3.088,1293,5.09,1294,3.088,1295,3.088,1296,3.088,1297,3.088,1298,4.38,1299,3.088,1300,3.088,1301,3.088,1302,3.088,1303,3.088,1304,4.38,1305,3.088,1306,3.088,1307,3.088,1308,4.38,1309,4.38,1310,3.088,1311,3.088,1312,3.088,1313,3.088,1314,3.088,1315,3.088,1316,3.088,1317,3.088,1318,3.088,1319,3.088,1320,2.627,1321,3.088,1322,3.088,1323,3.088,1324,3.088,1325,3.088,1326,3.088,1327,2.627]],["title/modules.html",[33,2.546]],["body/modules.html",[11,0.02,29,0.02,30,0.02,32,3.589,33,2.8,43,3.279,44,3.279,45,3.021,760,5.123,1328,6.808,1329,6.808,1330,6.808]],["title/overview.html",[1331,4.087]],["body/overview.html",[2,1.933,11,0.023,18,3.403,29,0.017,30,0.017,31,1.933,32,4.737,33,2.223,34,2.223,35,2.603,36,2.603,37,2.223,38,2.603,39,2.603,40,3.569,41,3.569,42,3.569,43,4.328,44,4.031,45,3.866,46,3.343,47,2.603,48,2.398,92,2.849,100,1.933,106,1.597,271,3.866,307,3.569,309,3.569,310,3.569,311,3.693,337,3.336,690,2.223,744,3.403,771,3.569,772,3.569,1075,3.569,1076,3.569,1077,3.569,1331,3.569,1332,5.388,1333,4.195,1334,4.195,1335,4.195,1336,3.569]],["title/properties.html",[111,1.128,1160,2.51]],["body/properties.html",[11,0.023,29,0.02,30,0.02,111,1.449,235,2.509,1320,4.632,1327,4.632,1337,5.444,1338,5.444,1339,5.444,1340,5.444]],["title/miscellaneous/typealiases.html",[1195,1.455,1341,4.24]],["body/miscellaneous/typealiases.html",[7,0.453,11,0.02,29,0.02,30,0.02,80,0.675,1154,4.586,1156,5.346,1157,5.346,1195,2.659,1342,5.39,1343,6.283,1344,6.283]],["title/miscellaneous/variables.html",[1195,1.455,1345,3.607]],["body/miscellaneous/variables.html",[7,0.317,11,0.023,15,1.396,27,1.274,29,0.016,30,0.016,76,1.2,80,0.638,88,1.74,119,1.188,132,2.287,169,1.863,184,3.125,204,1.437,207,2.842,249,2.343,262,3.416,274,3.416,283,3.416,362,2.037,410,1.74,414,3.213,437,2.842,477,3.121,511,3.213,677,3.213,701,2.564,708,3.785,710,3.213,750,3.416,751,2.564,824,4.266,912,2.343,913,2.842,920,3.841,922,3.416,923,2.343,1049,2.842,1101,3.785,1102,2.842,1137,4.28,1140,3.213,1144,4.812,1148,4.28,1149,2.842,1150,4.28,1195,1.863,1197,4.28,1203,3.213,1336,3.213,1345,3.213,1346,3.776,1347,3.776,1348,5.03,1349,5.03,1350,3.776,1351,3.776,1352,3.776,1353,3.776,1354,3.776,1355,3.776,1356,3.776,1357,3.776,1358,3.776,1359,3.776,1360,3.776,1361,3.776,1362,3.776,1363,3.776,1364,3.776]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":627,"title":{},"body":{"classes/DateHelper.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1338,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["0.3.21",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1136,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1134,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1141,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1143,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1142,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1145,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1146,"title":{},"body":{"coverage.html":{}}}],["0333338386",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["07:00",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["1",{"_index":560,"title":{},"body":{"classes/DateHelper.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["1).padstart(2",{"_index":630,"title":{},"body":{"classes/DateHelper.html":{}}}],["1.4.7",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"classes/UserFilterDto.html":{}}}],["100",{"_index":830,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["1000",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"classes/DateHelper.html":{}}}],["10})@isoptional()@type(undefined)@isint()@min(1)@max(100",{"_index":831,"title":{},"body":{"classes/PaginationDto.html":{}}}],["11.0.0",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["11.0.6",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1335,"title":{},"body":{"overview.html":{}}}],["123456",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["123456'})@isnotempty()@minlength(6",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["15/16",{"_index":1152,"title":{},"body":{"coverage.html":{}}}],["1})@isoptional()@type(undefined)@isint()@min(1",{"_index":833,"title":{},"body":{"classes/PaginationDto.html":{}}}],["2",{"_index":1333,"title":{},"body":{"overview.html":{}}}],["2.0.2",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":954,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["202",{"_index":956,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["204",{"_index":958,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["24",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"classes/DateHelper.html":{}}}],["3.1.10",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1332,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1187,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{}}}],["401",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{}}}],["5.0.1",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1336,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["6.10.0",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"classes/DateHelper.html":{}}}],["60000",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["7.8.1",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":1334,"title":{},"body":{"overview.html":{}}}],["8.1.0",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["8.13.3",{"_index":1189,"title":{},"body":{"dependencies.html":{}}}],["93",{"_index":1151,"title":{},"body":{"coverage.html":{}}}],["a'})@isnotempty({message",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":457,"title":{},"body":{"classes/BaseEntity.html":{}}}],["accepted",{"_index":957,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["access",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["accesstoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":769,"title":{},"body":{"controllers/MailController.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["active",{"_index":871,"title":{},"body":{"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["adapter",{"_index":789,"title":{},"body":{"modules/MailModule.html":{}}}],["adddays",{"_index":522,"title":{},"body":{"classes/DateHelper.html":{}}}],["adddays(date",{"_index":536,"title":{},"body":{"classes/DateHelper.html":{}}}],["addhours",{"_index":523,"title":{},"body":{"classes/DateHelper.html":{}}}],["addhours(date",{"_index":542,"title":{},"body":{"classes/DateHelper.html":{}}}],["addminutes",{"_index":524,"title":{},"body":{"classes/DateHelper.html":{}}}],["addminutes(date",{"_index":546,"title":{},"body":{"classes/DateHelper.html":{}}}],["admin",{"_index":868,"title":{},"body":{"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["alias",{"_index":1155,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1342,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":1267,"title":{},"body":{"index.html":{}}}],["already",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":1314,"title":{},"body":{"index.html":{}}}],["any).message",{"_index":686,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["api",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["apibearerauth",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apicookieauth",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicookieauth('refresh_token",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apiproperty({description",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["apipropertyoptional",{"_index":862,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["apipropertyoptional({description",{"_index":823,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["apiresponse",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('auth",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1239,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1216,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":673,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array.isarray(value",{"_index":870,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["asc",{"_index":849,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["ascending",{"_index":848,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["async",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"classes/PasswordHelper.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auditbaseentity",{"_index":105,"title":{"classes/AuditBaseEntity.html":{}},"body":{"classes/AuditBaseEntity.html":{},"coverage.html":{}}}],["auditsubscriber",{"_index":161,"title":{"injectables/AuditSubscriber.html":{}},"body":{"injectables/AuditSubscriber.html":{},"coverage.html":{}}}],["auth",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailModule.html":{}}}],["auth.controller",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":693,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":699,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":702,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:28",{"_index":705,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":221,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":707,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":694,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":43,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1320,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":271,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["avatar.jpg",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["avatarurl",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["await",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1256,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1315,"title":{},"body":{"index.html":{}}}],["bad",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":1099,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('password",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{}}}],["base.entity.ts",{"_index":108,"title":{},"body":{"classes/AuditBaseEntity.html":{},"coverage.html":{}}}],["base.entity.ts:13",{"_index":126,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["base.entity.ts:17",{"_index":124,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["base.entity.ts:9",{"_index":122,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["based",{"_index":836,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"index.html":{}}}],["baseentity",{"_index":110,"title":{"classes/BaseEntity.html":{}},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"classes/BaseEntity.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"coverage.html":{}}}],["baseentity:14",{"_index":135,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["baseentity:21",{"_index":147,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["baseentity:28",{"_index":139,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["baseentity:35",{"_index":144,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["bcrypt",{"_index":886,"title":{},"body":{"classes/PasswordHelper.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":890,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["bcrypt.hash(password",{"_index":889,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["bearertoken",{"_index":715,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["beforeinsert(event",{"_index":197,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["beforesoftremove",{"_index":164,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["beforesoftremove(event",{"_index":173,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["beforeupdate(event",{"_index":199,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["bio",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["board",{"_index":1307,"title":{},"body":{"index.html":{}}}],["body",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":613,"title":{},"body":{"classes/DateHelper.html":{},"entities/RefreshToken.html":{}}}],["bootstrap",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1330,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1328,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1211,"title":{},"body":{"index.html":{}}}],["bạn",{"_index":767,"title":{},"body":{"controllers/MailController.html":{}}}],["bằng",{"_index":593,"title":{},"body":{"classes/DateHelper.html":{}}}],["c",{"_index":156,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/DateHelper.html":{}}}],["callhandler",{"_index":915,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":695,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":700,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["case",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["catch",{"_index":210,"title":{},"body":{"injectables/AuditSubscriber.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":671,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":676,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ch",{"_index":555,"title":{},"body":{"classes/DateHelper.html":{}}}],["channel",{"_index":1281,"title":{},"body":{"index.html":{}}}],["characters",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":1246,"title":{},"body":{"index.html":{}}}],["chuyển",{"_index":619,"title":{},"body":{"classes/DateHelper.html":{}}}],["chuỗi",{"_index":620,"title":{},"body":{"classes/DateHelper.html":{}}}],["chọn",{"_index":155,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["class",{"_index":23,"title":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserFilterDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserFilterDto.html":{},"overview.html":{}}}],["clicks",{"_index":1266,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1251,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":771,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":772,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1075,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1077,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1076,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":453,"title":{},"body":{"classes/BaseEntity.html":{},"entities/RefreshToken.html":{},"entities/User.html":{}}}],["column()@index",{"_index":901,"title":{},"body":{"entities/RefreshToken.html":{}}}],["column({default",{"_index":898,"title":{},"body":{"entities/RefreshToken.html":{}}}],["column({nullable",{"_index":972,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":142,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"entities/RefreshToken.html":{},"entities/User.html":{}}}],["column({unique",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":1273,"title":{},"body":{"index.html":{}}}],["compare",{"_index":878,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["compare(password",{"_index":880,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["comparedate",{"_index":525,"title":{},"body":{"classes/DateHelper.html":{}}}],["comparedate(date1",{"_index":550,"title":{},"body":{"classes/DateHelper.html":{}}}],["configmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["configservice.get('db_database",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('email_auth_pass",{"_index":785,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('email_auth_user",{"_index":783,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('email_host",{"_index":781,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('email_port",{"_index":782,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('email_preview",{"_index":792,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":1098,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(errormessages.user.email_exists",{"_index":1110,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":204,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":196,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["constructor(configservice",{"_index":719,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(mailerservice",{"_index":794,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(private",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":697,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["constructor(request",{"_index":168,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["constructor(usersrepository",{"_index":1084,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":959,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context",{"_index":703,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context.getclass",{"_index":713,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":712,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":939,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":942,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('mail",{"_index":755,"title":{},"body":{"controllers/MailController.html":{}}}],["controller('users",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["cookie'})@apiresponse({status",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["courses",{"_index":1287,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1130,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":969,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":955,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["created.'})@apiresponse({status",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{}}}],["created_at",{"_index":131,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["created_by",{"_index":121,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["createdat",{"_index":115,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["createdat'})@isstring()@isoptional",{"_index":844,"title":{},"body":{"classes/PaginationDto.html":{}}}],["createdatecolumn",{"_index":454,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdatecolumn({type",{"_index":128,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["createpagination",{"_index":1104,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createpagination(repositoryorquerybuilder",{"_index":1204,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createpagination(this.usersrepository",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuserdto",{"_index":458,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1109,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":1111,"title":{},"body":{"injectables/UsersService.html":{}}}],["creator",{"_index":112,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["credentials",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["cron",{"_index":753,"title":{},"body":{"controllers/MailController.html":{}}}],["cron(cronexpression.every_30_seconds",{"_index":756,"title":{},"body":{"controllers/MailController.html":{}}}],["cronexpression",{"_index":754,"title":{},"body":{"controllers/MailController.html":{}}}],["crypto",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":677,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":680,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":679,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["current_timestamp",{"_index":133,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["currentpage",{"_index":818,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["currentuser",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custommessage",{"_index":937,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["cuối",{"_index":602,"title":{},"body":{"classes/DateHelper.html":{}}}],["cùng",{"_index":603,"title":{},"body":{"classes/DateHelper.html":{}}}],["cần",{"_index":160,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["của",{"_index":598,"title":{},"body":{"classes/DateHelper.html":{},"controllers/MailController.html":{}}}],["d",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["d+)(d|h|m|s",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["d1",{"_index":649,"title":{},"body":{"classes/DateHelper.html":{}}}],["d1.gettime",{"_index":655,"title":{},"body":{"classes/DateHelper.html":{}}}],["d1.sethours(0",{"_index":651,"title":{},"body":{"classes/DateHelper.html":{}}}],["d2",{"_index":652,"title":{},"body":{"classes/DateHelper.html":{}}}],["d2.gettime",{"_index":656,"title":{},"body":{"classes/DateHelper.html":{}}}],["d2.sethours(0",{"_index":654,"title":{},"body":{"classes/DateHelper.html":{}}}],["data",{"_index":913,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["data.data",{"_index":951,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["data.message",{"_index":949,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["database",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":127,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/DateHelper.html":{},"entities/RefreshToken.html":{}}}],["date().toisostring",{"_index":688,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["date(date",{"_index":640,"title":{},"body":{"classes/DateHelper.html":{}}}],["date(date1",{"_index":650,"title":{},"body":{"classes/DateHelper.html":{}}}],["date(date2",{"_index":653,"title":{},"body":{"classes/DateHelper.html":{}}}],["date(datestring",{"_index":648,"title":{},"body":{"classes/DateHelper.html":{}}}],["date(timestamp",{"_index":663,"title":{},"body":{"classes/DateHelper.html":{}}}],["date(year",{"_index":647,"title":{},"body":{"classes/DateHelper.html":{}}}],["date.getfullyear",{"_index":632,"title":{},"body":{"classes/DateHelper.html":{}}}],["date.gettime",{"_index":662,"title":{},"body":{"classes/DateHelper.html":{}}}],["date1",{"_index":562,"title":{},"body":{"classes/DateHelper.html":{}}}],["date2",{"_index":551,"title":{},"body":{"classes/DateHelper.html":{}}}],["datehelper",{"_index":519,"title":{"classes/DateHelper.html":{}},"body":{"classes/DateHelper.html":{},"coverage.html":{}}}],["datestring",{"_index":622,"title":{},"body":{"classes/DateHelper.html":{}}}],["datestring.includes",{"_index":645,"title":{},"body":{"classes/DateHelper.html":{}}}],["datestring.split('/').map(number",{"_index":646,"title":{},"body":{"classes/DateHelper.html":{}}}],["day",{"_index":625,"title":{},"body":{"classes/DateHelper.html":{}}}],["days",{"_index":537,"title":{},"body":{"classes/DateHelper.html":{}}}],["day}/${month}/${year",{"_index":633,"title":{},"body":{"classes/DateHelper.html":{}}}],["dd",{"_index":571,"title":{},"body":{"classes/DateHelper.html":{}}}],["dd/mm/yyyy",{"_index":577,"title":{},"body":{"classes/DateHelper.html":{}}}],["declarations",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/AuditBaseEntity.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"classes/PaginationDto.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{}}}],["decorators/current",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["decorators/response",{"_index":921,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["deeper",{"_index":1283,"title":{},"body":{"index.html":{}}}],["default",{"_index":132,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":945,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id/hard",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id/hard')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":946,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["deleted.'})@apiresponse({status",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted_at",{"_index":137,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["deleted_by",{"_index":123,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["deletedat",{"_index":116,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["deletedatecolumn",{"_index":455,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletedatecolumn({type",{"_index":136,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["deletedby",{"_index":117,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"injectables/UsersService.html":{}}}],["deleter",{"_index":113,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1238,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1255,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1247,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1265,"title":{},"body":{"index.html":{}}}],["desc",{"_index":851,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["descending",{"_index":850,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["description",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":926,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["descriptor.value",{"_index":929,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["developer",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["development",{"_index":1225,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1294,"title":{},"body":{"index.html":{}}}],["difftime",{"_index":664,"title":{},"body":{"classes/DateHelper.html":{}}}],["dir",{"_index":786,"title":{},"body":{"modules/MailModule.html":{}}}],["discord",{"_index":1280,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["dive",{"_index":1282,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1131,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/create",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/pagination",{"_index":803,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["dto/update",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dạng",{"_index":566,"title":{},"body":{"classes/DateHelper.html":{}}}],["e.g",{"_index":839,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["e2e",{"_index":1233,"title":{},"body":{"index.html":{}}}],["each",{"_index":869,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["efficient",{"_index":1212,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1244,"title":{},"body":{"index.html":{}}}],["ejs",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email_exists",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["engineer",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ensure",{"_index":1242,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1297,"title":{},"body":{"index.html":{}}}],["entities",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/base.entity",{"_index":191,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["entities/refresh",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["entities/user.entity",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":183,"title":{"entities/RefreshToken.html":{},"entities/User.html":{}},"body":{"injectables/AuditSubscriber.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('refresh_tokens",{"_index":904,"title":{},"body":{"entities/RefreshToken.html":{}}}],["entity('users",{"_index":989,"title":{},"body":{"entities/User.html":{}}}],["entity.createdby",{"_index":217,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["entity.deletedby",{"_index":220,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["entity.updatedby",{"_index":219,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["entitysubscriberinterface",{"_index":187,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["enum",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{}}}],["enumerations",{"_index":1196,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":706,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":211,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["error('password",{"_index":887,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["error(`config",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["errormessages",{"_index":1101,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":176,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["event.entity",{"_index":200,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["eventsubscriber",{"_index":188,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["example",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UserFilterDto.html":{},"index.html":{}}}],["exception",{"_index":675,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":669,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":674,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":683,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":681,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":670,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":682,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":701,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existinguser",{"_index":1107,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["experience",{"_index":1285,"title":{},"body":{"index.html":{}}}],["expires_at",{"_index":894,"title":{},"body":{"entities/RefreshToken.html":{}}}],["expiresat",{"_index":893,"title":{},"body":{"entities/RefreshToken.html":{}}}],["expiresin",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":193,"title":{},"body":{"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":109,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/RefreshToken.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["extract",{"_index":213,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["extractjwt",{"_index":723,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":911,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9...'})@isnotempty()@isstring",{"_index":909,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["false",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"classes/PasswordHelper.html":{}}}],["false})@isoptional",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fast",{"_index":1259,"title":{},"body":{"index.html":{}}}],["features",{"_index":1269,"title":{},"body":{"index.html":{}}}],["few",{"_index":1261,"title":{},"body":{"index.html":{}}}],["field",{"_index":842,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["fields",{"_index":838,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":812,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["findall",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(paginationdto",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findallwithdeleted",{"_index":1082,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail",{"_index":1083,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1090,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":1268,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1301,"title":{},"body":{"index.html":{}}}],["format",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["format'})@isnotempty({message",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["formatdate",{"_index":526,"title":{},"body":{"classes/DateHelper.html":{}}}],["formatdate(date",{"_index":563,"title":{},"body":{"classes/DateHelper.html":{}}}],["formatdatetime",{"_index":527,"title":{},"body":{"classes/DateHelper.html":{}}}],["formatdatetime(date",{"_index":572,"title":{},"body":{"classes/DateHelper.html":{}}}],["formatdatevn",{"_index":528,"title":{},"body":{"classes/DateHelper.html":{}}}],["formatdatevn(date",{"_index":575,"title":{},"body":{"classes/DateHelper.html":{}}}],["found",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["found.'})@responsemessage('user",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":1210,"title":{},"body":{"index.html":{}}}],["fromtimestamp",{"_index":529,"title":{},"body":{"classes/DateHelper.html":{}}}],["fromtimestamp(timestamp",{"_index":580,"title":{},"body":{"classes/DateHelper.html":{}}}],["full",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["function",{"_index":924,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":1200,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1264,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile')@apibearerauth()@apioperation({summary",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@public()@responsemessage('test",{"_index":742,"title":{},"body":{"controllers/MailController.html":{}}}],["get()@useguards(jwtauthguard)@apibearerauth()@apioperation({summary",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{}}}],["getconfignumber",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["getconfignumber(key",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["getdaysdifference",{"_index":530,"title":{},"body":{"classes/DateHelper.html":{}}}],["getdaysdifference(date1",{"_index":586,"title":{},"body":{"classes/DateHelper.html":{}}}],["getdefaultmessageforstatuscode",{"_index":960,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["getdefaultmessageforstatuscode(statuscode",{"_index":952,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["getfirstdayofmonth",{"_index":531,"title":{},"body":{"classes/DateHelper.html":{}}}],["getfirstdayofmonth(date",{"_index":594,"title":{},"body":{"classes/DateHelper.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlastdayofmonth",{"_index":532,"title":{},"body":{"classes/DateHelper.html":{}}}],["getlastdayofmonth(date",{"_index":600,"title":{},"body":{"classes/DateHelper.html":{}}}],["getprofile",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@currentuser",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(user",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrefreshexpirationms",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":1206,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(user",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserid",{"_index":165,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["gi",{"_index":545,"title":{},"body":{"classes/DateHelper.html":{}}}],["gian",{"_index":591,"title":{},"body":{"classes/DateHelper.html":{}}}],["giữa",{"_index":592,"title":{},"body":{"classes/DateHelper.html":{}}}],["graph",{"_index":1290,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1311,"title":{},"body":{"index.html":{}}}],["h",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"classes/DateHelper.html":{}}}],["hai",{"_index":554,"title":{},"body":{"classes/DateHelper.html":{}}}],["handlebars",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":776,"title":{},"body":{"modules/MailModule.html":{}}}],["handler",{"_index":933,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["handlerequest",{"_index":696,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":704,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handletestemail",{"_index":741,"title":{},"body":{"controllers/MailController.html":{}}}],["hands",{"_index":1284,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1274,"title":{},"body":{"index.html":{}}}],["hard",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["hardremove",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hardremove(@param('id",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["hardremove(id",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hash",{"_index":879,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["hash(password",{"_index":883,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["hashedpassword",{"_index":881,"title":{},"body":{"classes/PasswordHelper.html":{},"injectables/UsersService.html":{}}}],["hashing",{"_index":888,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["hello",{"_index":103,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1288,"title":{},"body":{"index.html":{}}}],["here",{"_index":1318,"title":{},"body":{"index.html":{}}}],["hiện",{"_index":615,"title":{},"body":{"classes/DateHelper.html":{}}}],["host",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/MailModule.html":{}}}],["host.switchtohttp",{"_index":678,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hours",{"_index":543,"title":{},"body":{"classes/DateHelper.html":{}}}],["hours}:${minutes}:${seconds",{"_index":638,"title":{},"body":{"classes/DateHelper.html":{}}}],["httpcode",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":672,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":667,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":1324,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["hust",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["hôm",{"_index":611,"title":{},"body":{"classes/DateHelper.html":{}}}],["id",{"_index":208,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@get(':id')@responsemessage('user",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["id'})@responsemessage('user",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":1132,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":195,"title":{},"body":{"injectables/AuditSubscriber.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":988,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index(['userid",{"_index":905,"title":{},"body":{"entities/RefreshToken.html":{}}}],["indexable",{"_index":992,"title":{},"body":{"interfaces/UserFilter.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["info'})@apiresponse({status",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["information",{"_index":1249,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1271,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":134,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuditSubscriber.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["injectable",{"_index":99,"title":{"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(refreshtoken",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(user",{"_index":1106,"title":{},"body":{"injectables/UsersService.html":{}}}],["insertevent",{"_index":189,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["install",{"_index":1263,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1223,"title":{},"body":{"index.html":{}}}],["int",{"_index":143,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["interact",{"_index":1291,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":931,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":963,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":689,"title":{"interfaces/IUser.html":{},"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/Response.html":{},"interfaces/UserFilter.html":{}},"body":{"interfaces/IUser.html":{},"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserFilter.html":{},"coverage.html":{}}}],["interfaces",{"_index":690,"title":{},"body":{"interfaces/IUser.html":{},"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/Response.html":{},"interfaces/UserFilter.html":{},"overview.html":{}}}],["invalid",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["invalid_credentials",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid_email",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":708,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isactive",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"entities/RefreshToken.html":{}}}],["isarray",{"_index":859,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["isemail",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["isenum(sortorder",{"_index":876,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["isenum(userrole",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userstatus",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["isglobal",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":854,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["isnan(number(refreshexpiresin",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{}}}],["iso",{"_index":644,"title":{},"body":{"classes/DateHelper.html":{}}}],["isoptional",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["ispublic",{"_index":710,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":857,"title":{},"body":{"classes/PaginationDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UserFilterDto.html":{}}}],["istoday",{"_index":533,"title":{},"body":{"classes/DateHelper.html":{}}}],["istoday(date",{"_index":604,"title":{},"body":{"classes/DateHelper.html":{}}}],["itemcount",{"_index":815,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["items",{"_index":798,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["itemsperpage",{"_index":816,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["iuser",{"_index":349,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["job",{"_index":1304,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1306,"title":{},"body":{"index.html":{}}}],["john",{"_index":875,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":840,"title":{},"body":{"classes/PaginationDto.html":{}}}],["join",{"_index":778,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":787,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":150,"title":{},"body":{"classes/AuditBaseEntity.html":{},"entities/RefreshToken.html":{}}}],["jwt",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":59,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":727,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":311,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1321,"title":{},"body":{"index.html":{}}}],["kas",{"_index":1340,"title":{},"body":{"properties.html":{}}}],["kas2k3",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["key",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserFilter.html":{},"index.html":{}}}],["keyword",{"_index":835,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["khi",{"_index":159,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["khoản",{"_index":766,"title":{},"body":{"controllers/MailController.html":{}}}],["khoảng",{"_index":589,"title":{},"body":{"classes/DateHelper.html":{}}}],["không",{"_index":556,"title":{},"body":{"classes/DateHelper.html":{}}}],["kiểm",{"_index":606,"title":{},"body":{"classes/DateHelper.html":{}}}],["kiểu",{"_index":568,"title":{},"body":{"classes/DateHelper.html":{}}}],["l",{"_index":610,"title":{},"body":{"classes/DateHelper.html":{}}}],["learn",{"_index":1277,"title":{},"body":{"index.html":{}}}],["legend",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1327,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1309,"title":{},"body":{"index.html":{}}}],["limit",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["linkedin",{"_index":1303,"title":{},"body":{"index.html":{}}}],["listento",{"_index":166,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["literal",{"_index":1344,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["logger",{"_index":163,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["logger(auditsubscriber.name",{"_index":186,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["login",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login'})@apiresponse({status",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":240,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout'})@apiresponse({status",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1250,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1299,"title":{},"body":{"index.html":{}}}],["lấy",{"_index":588,"title":{},"body":{"classes/DateHelper.html":{}}}],["m",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["mail",{"_index":740,"title":{},"body":{"controllers/MailController.html":{}}}],["mail.controller",{"_index":774,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.service",{"_index":745,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["mailcontroller",{"_index":738,"title":{"controllers/MailController.html":{}},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["mailermodule",{"_index":775,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":779,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":746,"title":{},"body":{"controllers/MailController.html":{},"injectables/MailService.html":{}}}],["mailmodule",{"_index":44,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":744,"title":{"injectables/MailService.html":{}},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["makes",{"_index":1257,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1270,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":149,"title":{},"body":{"classes/AuditBaseEntity.html":{},"entities/RefreshToken.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":120,"title":{},"body":{"classes/AuditBaseEntity.html":{},"entities/RefreshToken.html":{}}}],["map",{"_index":918,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["map((data",{"_index":941,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["match",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["match[2",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.abs(d2.gettime",{"_index":665,"title":{},"body":{"classes/DateHelper.html":{}}}],["math.floor(difftime",{"_index":666,"title":{},"body":{"classes/DateHelper.html":{}}}],["mau",{"_index":1253,"title":{},"body":{"index.html":{}}}],["max",{"_index":856,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["max(100",{"_index":874,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["maxage",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["maximum",{"_index":829,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["message",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["message.decorator",{"_index":752,"title":{},"body":{"controllers/MailController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["message.decorator.ts",{"_index":1144,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["messages.constant",{"_index":1103,"title":{},"body":{"injectables/UsersService.html":{}}}],["messages.constant.ts",{"_index":1148,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["meta",{"_index":799,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["metadata",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"classes/PasswordHelper.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["milliseconds",{"_index":585,"title":{},"body":{"classes/DateHelper.html":{}}}],["min",{"_index":855,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["min(1",{"_index":873,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["minh",{"_index":764,"title":{},"body":{"controllers/MailController.html":{}}}],["minimum",{"_index":828,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["minlength",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minlength(6",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minutes",{"_index":547,"title":{},"body":{"classes/DateHelper.html":{}}}],["miscellaneous",{"_index":1195,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1308,"title":{},"body":{"index.html":{}}}],["mm",{"_index":570,"title":{},"body":{"classes/DateHelper.html":{}}}],["mode",{"_index":1228,"title":{},"body":{"index.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":748,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":777,"title":{},"body":{"modules/MailModule.html":{}}}],["month",{"_index":628,"title":{},"body":{"classes/DateHelper.html":{}}}],["more",{"_index":1248,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":865,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["myśliwiec",{"_index":1322,"title":{},"body":{"index.html":{}}}],["một",{"_index":541,"title":{},"body":{"classes/DateHelper.html":{}}}],["nam",{"_index":579,"title":{},"body":{"classes/DateHelper.html":{}}}],["name",{"_index":130,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":864,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["nay",{"_index":612,"title":{},"body":{"classes/DateHelper.html":{}}}],["need",{"_index":1295,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1217,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1326,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":914,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":747,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuditSubscriber.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/MailController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":185,"title":{},"body":{"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"classes/PasswordHelper.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["next",{"_index":932,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle",{"_index":936,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":940,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nguyễn",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ngày",{"_index":539,"title":{},"body":{"classes/DateHelper.html":{}}}],["nh",{"_index":565,"title":{},"body":{"classes/DateHelper.html":{}}}],["node.js",{"_index":1209,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["not_found",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":1097,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(errormessages.user.not_found",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["now",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"classes/DateHelper.html":{}}}],["npm",{"_index":1222,"title":{},"body":{"index.html":{}}}],["null",{"_index":141,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":138,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"entities/RefreshToken.html":{},"entities/User.html":{}}}],["number",{"_index":140,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"interfaces/IUser.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(user.id",{"_index":209,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["nếu",{"_index":561,"title":{},"body":{"classes/DateHelper.html":{}}}],["object",{"_index":207,"title":{},"body":{"injectables/AuditSubscriber.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["object.assign(user",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":916,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["offer",{"_index":1305,"title":{},"body":{"index.html":{}}}],["official",{"_index":1254,"title":{},"body":{"index.html":{}}}],["omittype",{"_index":968,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["omittype(createuserdto",{"_index":967,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["only)'})@responsemessage('users",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["open",{"_index":1310,"title":{},"body":{"index.html":{}}}],["optional",{"_index":172,"title":{},"body":{"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":790,"title":{},"body":{"modules/MailModule.html":{},"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"miscellaneous/functions.html":{}}}],["options.dto",{"_index":804,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto.ts",{"_index":821,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:102",{"_index":845,"title":{},"body":{"classes/PaginationDto.html":{}}}],["options.dto.ts:30",{"_index":996,"title":{},"body":{"classes/UserFilterDto.html":{}}}],["options.dto.ts:42",{"_index":997,"title":{},"body":{"classes/UserFilterDto.html":{}}}],["options.dto.ts:54",{"_index":834,"title":{},"body":{"classes/PaginationDto.html":{}}}],["options.dto.ts:66",{"_index":832,"title":{},"body":{"classes/PaginationDto.html":{}}}],["options.dto.ts:75",{"_index":841,"title":{},"body":{"classes/PaginationDto.html":{}}}],["options.dto.ts:84",{"_index":826,"title":{},"body":{"classes/PaginationDto.html":{}}}],["options.dto.ts:94",{"_index":853,"title":{},"body":{"classes/PaginationDto.html":{}}}],["order",{"_index":847,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["organization",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["organizer",{"_index":987,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1331,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1160,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":809,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["paginatedresponse",{"_index":1156,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":796,"title":{"interfaces/Pagination.html":{}},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginationdto",{"_index":819,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["paginationmeta",{"_index":800,"title":{"interfaces/PaginationMeta.html":{}},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"coverage.html":{}}}],["paginationoptions",{"_index":808,"title":{"interfaces/PaginationOptions.html":{}},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationparams",{"_index":1157,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":171,"title":{},"body":{"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/PasswordHelper.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parsedate",{"_index":534,"title":{},"body":{"classes/DateHelper.html":{}}}],["parsedate(datestring",{"_index":617,"title":{},"body":{"classes/DateHelper.html":{}}}],["parseint(match[1",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["parseint(refreshexpiresin",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["parseint(timestring",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["parseint(value",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["parseintpipe",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["parser",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["parsetimetoms",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsetimetoms(timestring",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["part",{"_index":1296,"title":{},"body":{"index.html":{}}}],["pass",{"_index":784,"title":{},"body":{"modules/MailModule.html":{}}}],["passionate",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["passport",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":717,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passthrough",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PasswordHelper.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password_too_short",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordhelper",{"_index":367,"title":{"classes/PasswordHelper.html":{}},"body":{"injectables/AuthService.html":{},"classes/PasswordHelper.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["passwordhelper.compare(password",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhelper.hash(createuserdto.password",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apibearerauth()@apioperation({summary",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"modules/MailModule.html":{}}}],["payload",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.jti",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["per",{"_index":827,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["permanently",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":1188,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["phuoc17032003@gmail.com",{"_index":759,"title":{},"body":{"controllers/MailController.html":{}}}],["phuochavinh@gmail.com",{"_index":737,"title":{},"body":{"classes/LoginDto.html":{}}}],["phuochavinh@gmail.com'})@isemail()@isnotempty",{"_index":734,"title":{},"body":{"classes/LoginDto.html":{}}}],["phút",{"_index":549,"title":{},"body":{"classes/DateHelper.html":{}}}],["phải",{"_index":609,"title":{},"body":{"classes/DateHelper.html":{}}}],["platform",{"_index":1252,"title":{},"body":{"index.html":{}}}],["please",{"_index":1279,"title":{},"body":{"index.html":{}}}],["port",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["possible",{"_index":1245,"title":{},"body":{"index.html":{}}}],["post",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post(':id/restore",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["post(':id/restore')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@httpcode(httpstatus.ok)@apibearerauth()@apioperation({summary",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@apioperation({summary",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MailController.html":{},"controllers/UsersController.html":{}}}],["preview",{"_index":791,"title":{},"body":{"modules/MailModule.html":{}}}],["primarycolumn",{"_index":903,"title":{},"body":{"entities/RefreshToken.html":{}}}],["primarycolumn('uuid",{"_index":896,"title":{},"body":{"entities/RefreshToken.html":{}}}],["primarygeneratedcolumn",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["profile",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apiresponse({status",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["progressive",{"_index":1208,"title":{},"body":{"index.html":{}}}],["project",{"_index":1220,"title":{},"body":{"index.html":{}}}],["promise",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordHelper.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":111,"title":{"properties.html":{}},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"classes/LoginDto.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"properties.html":{}}}],["propertydescriptor",{"_index":927,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["provide",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MailController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login')@useguards(throttlerguard)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh')@httpcode(httpstatus.ok)@apicookieauth('refresh_token')@apioperation({summary",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["query",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":1278,"title":{},"body":{"index.html":{}}}],["read",{"_index":1317,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1237,"title":{},"body":{"index.html":{}}}],["real",{"_index":1292,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1190,"title":{},"body":{"dependencies.html":{}}}],["reflect.definemetadata(skip_transform_interceptor",{"_index":928,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["reflector",{"_index":698,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["refresh",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshexpiresin",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":317,"title":{"entities/RefreshToken.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokendto",{"_index":906,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenrepository",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokens(request",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["regexp(timeregex).exec(timestring",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["relations",{"_index":153,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["relevant",{"_index":837,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["remove",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(id",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repositoryorquerybuilder",{"_index":1205,"title":{},"body":{"miscellaneous/functions.html":{}}}],["req",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":169,"title":{},"body":{"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.'})@responsemessage('user",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["request.cookies['refreshtoken",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["request.method",{"_index":944,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["request.url",{"_index":687,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordHelper.html":{},"injectables/UsersService.html":{}}}],["requiring",{"_index":1260,"title":{},"body":{"index.html":{}}}],["res",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1272,"title":{},"body":{"index.html":{}}}],["response",{"_index":241,"title":{"interfaces/Response.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.cookie('refreshtoken",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.status(status).json",{"_index":684,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.statuscode",{"_index":943,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["response_message",{"_index":920,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsedata",{"_index":950,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["responsemessage",{"_index":750,"title":{},"body":{"controllers/MailController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsemessage('test",{"_index":757,"title":{},"body":{"controllers/MailController.html":{}}}],["responsemessage('user",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["responsemessage('users",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["restore",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["restore(@param('id",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["restore(id",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["restored",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{}}}],["restored.'})@apiresponse({status",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["result",{"_index":639,"title":{},"body":{"classes/DateHelper.html":{},"injectables/UsersService.html":{}}}],["result.affected",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.setdate(0",{"_index":661,"title":{},"body":{"classes/DateHelper.html":{}}}],["result.setdate(1",{"_index":659,"title":{},"body":{"classes/DateHelper.html":{}}}],["result.setdate(result.getdate",{"_index":641,"title":{},"body":{"classes/DateHelper.html":{}}}],["result.sethours(result.gethours",{"_index":642,"title":{},"body":{"classes/DateHelper.html":{}}}],["result.setminutes(result.getminutes",{"_index":643,"title":{},"body":{"classes/DateHelper.html":{}}}],["result.setmonth(result.getmonth",{"_index":660,"title":{},"body":{"classes/DateHelper.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordHelper.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/MailController.html":{},"classes/PasswordHelper.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rolenames",{"_index":806,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["roles",{"_index":824,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles_key",{"_index":1150,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1224,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1243,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":917,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":919,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["s",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltrounds",{"_index":884,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["samesite",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["sang",{"_index":621,"title":{},"body":{"classes/DateHelper.html":{}}}],["scalable",{"_index":1213,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["scope",{"_index":192,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["scope.request",{"_index":194,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["search",{"_index":810,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["searchfields",{"_index":811,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"injectables/UsersService.html":{}}}],["seconds",{"_index":636,"title":{},"body":{"classes/DateHelper.html":{}}}],["secret",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{}}}],["selected",{"_index":867,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["server",{"_index":1214,"title":{},"body":{"index.html":{}}}],["setcreatedby(entity",{"_index":214,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["setdeletedby",{"_index":167,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["setdeletedby(entity",{"_index":181,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["setmetadata(is_public_key",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(response_message",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1221,"title":{},"body":{"index.html":{}}}],["setupdatedby(entity",{"_index":218,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["side",{"_index":1215,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1262,"title":{},"body":{"index.html":{}}}],["skip_transform_interceptor",{"_index":922,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["skipinterceptor",{"_index":934,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["skiptransforminterceptor",{"_index":923,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["soft",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["softremoveevent",{"_index":174,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["software",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sort",{"_index":843,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["sortby",{"_index":813,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["sortorder",{"_index":802,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["sortorder.desc",{"_index":846,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":1313,"title":{},"body":{"index.html":{}}}],["src/.../common.types.ts",{"_index":1343,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../current",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1201,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination",{"_index":1198,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pagination.helper.ts",{"_index":1202,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../response",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1197,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../transform.interceptor.ts",{"_index":1203,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1199,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:42",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:72",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:84",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:121",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:15",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:191",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:205",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:235",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:60",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:73",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:91",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/current",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator",{"_index":749,"title":{},"body":{"controllers/MailController.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1140,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":733,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:11",{"_index":735,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:19",{"_index":736,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/refresh",{"_index":907,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/entities/refresh",{"_index":891,"title":{},"body":{"entities/RefreshToken.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":692,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":716,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:10",{"_index":720,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:22",{"_index":722,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/decorators/response",{"_index":751,"title":{},"body":{"controllers/MailController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto/pagination",{"_index":820,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/common/entities/audit",{"_index":107,"title":{},"body":{"classes/AuditBaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity",{"_index":148,"title":{},"body":{"classes/AuditBaseEntity.html":{},"entities/RefreshToken.html":{},"entities/User.html":{}}}],["src/common/entities/base.entity.ts",{"_index":448,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:14",{"_index":449,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:21",{"_index":452,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:28",{"_index":450,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:35",{"_index":451,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":912,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/transform.interceptor.ts:30",{"_index":961,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:33",{"_index":964,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:91",{"_index":962,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces/pagination.interface",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/common/interfaces/pagination.interface.ts",{"_index":797,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"coverage.html":{}}}],["src/common/interfaces/pagination.interface.ts:6",{"_index":993,"title":{},"body":{"interfaces/UserFilter.html":{}}}],["src/common/subscribers/audit.subscriber.ts",{"_index":162,"title":{},"body":{"injectables/AuditSubscriber.html":{},"coverage.html":{}}}],["src/common/subscribers/audit.subscriber.ts:16",{"_index":170,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["src/common/subscribers/audit.subscriber.ts:20",{"_index":180,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["src/common/subscribers/audit.subscriber.ts:34",{"_index":175,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["src/common/subscribers/audit.subscriber.ts:40",{"_index":178,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["src/common/subscribers/audit.subscriber.ts:67",{"_index":182,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["src/mail/mail.controller.ts",{"_index":739,"title":{},"body":{"controllers/MailController.html":{},"coverage.html":{}}}],["src/mail/mail.controller.ts:19",{"_index":743,"title":{},"body":{"controllers/MailController.html":{}}}],["src/mail/mail.module.ts",{"_index":773,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service.ts",{"_index":793,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:6",{"_index":795,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1147,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":966,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":801,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["src/users/entities/user.entity.ts",{"_index":971,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":979,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":977,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":982,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":980,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":984,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":981,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":983,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":973,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":975,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":985,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":986,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.interface",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/user.interface.ts",{"_index":691,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":999,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:101",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:113",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1078,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1081,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:102",{"_index":1093,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:110",{"_index":1095,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:120",{"_index":1089,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1085,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":1087,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:49",{"_index":1092,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:59",{"_index":1088,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:66",{"_index":1091,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:72",{"_index":1096,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:90",{"_index":1094,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/constants/error",{"_index":1102,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/decorators/roles.decorator.ts",{"_index":1149,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/filters/http",{"_index":668,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/utils/helpers/date.helper.ts",{"_index":520,"title":{},"body":{"classes/DateHelper.html":{},"coverage.html":{}}}],["src/utils/helpers/date.helper.ts:103",{"_index":605,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:111",{"_index":595,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:12",{"_index":564,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:120",{"_index":601,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:130",{"_index":624,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:137",{"_index":581,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:144",{"_index":587,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:23",{"_index":576,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:34",{"_index":573,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:48",{"_index":538,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:5",{"_index":614,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:57",{"_index":544,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:66",{"_index":548,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:75",{"_index":618,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/date.helper.ts:88",{"_index":552,"title":{},"body":{"classes/DateHelper.html":{}}}],["src/utils/helpers/pagination.helper",{"_index":1105,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/helpers/pagination.helper.ts",{"_index":1153,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/helpers/password.helper",{"_index":1100,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/helpers/password.helper.ts",{"_index":877,"title":{},"body":{"classes/PasswordHelper.html":{},"coverage.html":{}}}],["src/utils/helpers/password.helper.ts:14",{"_index":882,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["src/utils/helpers/password.helper.ts:4",{"_index":885,"title":{},"body":{"classes/PasswordHelper.html":{}}}],["src/utils/types/common.types.ts",{"_index":1154,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":1226,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1229,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1230,"title":{},"body":{"index.html":{}}}],["started",{"_index":1207,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1219,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":521,"title":{},"body":{"classes/DateHelper.html":{},"classes/PasswordHelper.html":{}}}],["status",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":685,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["statuses",{"_index":807,"title":{},"body":{"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{}}}],["stay",{"_index":1298,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1240,"title":{},"body":{"index.html":{}}}],["storedtoken",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["storedtoken.expiresat",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["storerefreshtoken",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["storerefreshtoken(userid",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["straightforward",{"_index":1258,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":724,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strict",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"interfaces/IUser.html":{},"classes/LoginDto.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(date.getdate()).padstart(2",{"_index":626,"title":{},"body":{"classes/DateHelper.html":{}}}],["string(date.gethours()).padstart(2",{"_index":634,"title":{},"body":{"classes/DateHelper.html":{}}}],["string(date.getminutes()).padstart(2",{"_index":635,"title":{},"body":{"classes/DateHelper.html":{}}}],["string(date.getmonth",{"_index":629,"title":{},"body":{"classes/DateHelper.html":{}}}],["string(date.getseconds()).padstart(2",{"_index":637,"title":{},"body":{"classes/DateHelper.html":{}}}],["subject",{"_index":762,"title":{},"body":{"controllers/MailController.html":{}}}],["success",{"_index":953,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["successful",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["successful'})@apiresponse({status",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":947,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":709,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":714,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":760,"title":{},"body":{"controllers/MailController.html":{},"index.html":{},"modules.html":{}}}],["suspended",{"_index":872,"title":{},"body":{"classes/PaginationDto.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["svg",{"_index":1329,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["synchronize",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["sánh",{"_index":553,"title":{},"body":{"classes/DateHelper.html":{}}}],["t",{"_index":583,"title":{},"body":{"classes/DateHelper.html":{},"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"interfaces/UserFilter.html":{}}}],["table",{"_index":1159,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1158,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1241,"title":{},"body":{"index.html":{}}}],["target",{"_index":925,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["team",{"_index":761,"title":{},"body":{"controllers/MailController.html":{}}}],["template",{"_index":768,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{}}}],["templates",{"_index":788,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1232,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1235,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1234,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1231,"title":{},"body":{"index.html":{}}}],["text",{"_index":974,"title":{},"body":{"entities/User.html":{}}}],["th",{"_index":157,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["thanks",{"_index":1312,"title":{},"body":{"index.html":{}}}],["theo",{"_index":567,"title":{},"body":{"classes/DateHelper.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(user.id",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtokens(request",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.comparedate(date",{"_index":658,"title":{},"body":{"classes/DateHelper.html":{}}}],["this.configservice.get('jwt_refresh_expires_in",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('node_env",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get(key",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone(id",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getdefaultmessageforstatuscode(statuscode",{"_index":948,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["this.getrefreshexpirationms",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getuserid",{"_index":216,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.warn('failed",{"_index":212,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["this.mailerservice.sendmail",{"_index":758,"title":{},"body":{"controllers/MailController.html":{}}}],["this.parsetimetoms(refreshexpiresin",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.get",{"_index":935,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["this.reflector.get(response_message",{"_index":938,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":711,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshtokenrepository.findone",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.user",{"_index":205,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["this.setcreatedby(event.entity",{"_index":198,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["this.setdeletedby(event.entity",{"_index":202,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["this.setupdatedby(event.entity",{"_index":201,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["this.storerefreshtoken(user.id",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.create",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1108,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.restore(id",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.softdelete(id",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(paginationdto",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyemail(email",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(id",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(payload.id",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.hardremove(id",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.restore(id",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateuser(email",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["throttle(5",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["throttlerguard",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["throttlermodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlers",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordHelper.html":{},"injectables/UsersService.html":{}}}],["tháng",{"_index":599,"title":{},"body":{"classes/DateHelper.html":{}}}],["thêm",{"_index":158,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/DateHelper.html":{}}}],["thời",{"_index":590,"title":{},"body":{"classes/DateHelper.html":{}}}],["time",{"_index":1293,"title":{},"body":{"index.html":{}}}],["timeregex",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["timestamp",{"_index":584,"title":{},"body":{"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["timestamptz",{"_index":129,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{},"entities/RefreshToken.html":{}}}],["timestring",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["timezone",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["tiên",{"_index":597,"title":{},"body":{"classes/DateHelper.html":{}}}],["today",{"_index":657,"title":{},"body":{"classes/DateHelper.html":{}}}],["token",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/RefreshTokenDto.html":{}}}],["token'})@apiresponse({status",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":908,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:11",{"_index":910,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.entity",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["token.entity.ts",{"_index":892,"title":{},"body":{"entities/RefreshToken.html":{},"coverage.html":{}}}],["token.entity.ts:16",{"_index":897,"title":{},"body":{"entities/RefreshToken.html":{}}}],["token.entity.ts:20",{"_index":902,"title":{},"body":{"entities/RefreshToken.html":{}}}],["token.entity.ts:23",{"_index":899,"title":{},"body":{"entities/RefreshToken.html":{}}}],["token.entity.ts:30",{"_index":895,"title":{},"body":{"entities/RefreshToken.html":{}}}],["token.entity.ts:34",{"_index":900,"title":{},"body":{"entities/RefreshToken.html":{}}}],["tokens",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.accesstoken",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens.refreshtoken",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["totalitems",{"_index":814,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["totalpages",{"_index":817,"title":{},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{}}}],["totimestamp",{"_index":535,"title":{},"body":{"classes/DateHelper.html":{}}}],["totimestamp(date",{"_index":623,"title":{},"body":{"classes/DateHelper.html":{}}}],["touch",{"_index":1319,"title":{},"body":{"index.html":{}}}],["tr",{"_index":558,"title":{},"body":{"classes/DateHelper.html":{}}}],["tra",{"_index":607,"title":{},"body":{"classes/DateHelper.html":{}}}],["transform",{"_index":860,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["transformer",{"_index":861,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":930,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transport",{"_index":780,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditBaseEntity.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"injectables/JwtAuthGuard.html":{},"modules/MailModule.html":{},"classes/PaginationDto.html":{},"entities/RefreshToken.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@transform",{"_index":995,"title":{},"body":{"classes/UserFilterDto.html":{}}}],["try",{"_index":203,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{}}}],["ttl",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1325,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreateUserDto.html":{},"classes/DateHelper.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MailService.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"classes/PasswordHelper.html":{},"entities/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1341,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":206,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{}}}],["typeorm",{"_index":151,"title":{},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([refreshtoken",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1080,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1218,"title":{},"body":{"index.html":{}}}],["tài",{"_index":765,"title":{},"body":{"controllers/MailController.html":{}}}],["tính",{"_index":557,"title":{},"body":{"classes/DateHelper.html":{}}}],["tùy",{"_index":154,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["tại",{"_index":616,"title":{},"body":{"classes/DateHelper.html":{}}}],["tạo",{"_index":582,"title":{},"body":{"classes/DateHelper.html":{}}}],["u",{"_index":596,"title":{},"body":{"classes/DateHelper.html":{}}}],["unauthorized",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('refresh",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":179,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PasswordHelper.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":994,"title":{},"body":{"classes/UserFilterDto.html":{}}}],["undefined})@isoptional()@isenum(sortorder",{"_index":852,"title":{},"body":{"classes/PaginationDto.html":{}}}],["undefined})@isoptional()@isenum(userrole",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isoptional()@isenum(userstatus",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserFilterDto.html":{}}}],["unique",{"_index":990,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unknown",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1339,"title":{},"body":{"properties.html":{}}}],["update",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated_at",{"_index":146,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["updated_by",{"_index":125,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["updatedat",{"_index":118,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":456,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedatecolumn({type",{"_index":145,"title":{},"body":{"classes/AuditBaseEntity.html":{},"classes/BaseEntity.html":{}}}],["updateevent",{"_index":190,"title":{},"body":{"injectables/AuditSubscriber.html":{}}}],["updater",{"_index":114,"title":{},"body":{"classes/AuditBaseEntity.html":{}}}],["updates",{"_index":1300,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":965,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.email",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["useclass",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["useguards",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@apibearerauth()@apioperation({summary",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@apibearerauth()@delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(throttlerguard",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":119,"title":{"entities/User.html":{}},"body":{"classes/AuditBaseEntity.html":{},"injectables/AuditSubscriber.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/MailModule.html":{},"classes/PaginationDto.html":{},"entities/RefreshToken.html":{},"entities/User.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.decorator",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1137,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":970,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:18",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:57",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:73",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:83",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:93",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["user.name",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["user@gmail.com",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user@gmail.com'})@isemail",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userdata",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.email",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.id",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.name",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.role",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfilter",{"_index":805,"title":{"interfaces/UserFilter.html":{}},"body":{"interfaces/Pagination.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"interfaces/UserFilter.html":{},"coverage.html":{}}}],["userfilterdto",{"_index":822,"title":{"classes/UserFilterDto.html":{}},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"coverage.html":{}}}],["userfilterdto})@isoptional()@validatenested()@type(undefined",{"_index":825,"title":{},"body":{"classes/PaginationDto.html":{}}}],["userid",{"_index":215,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"entities/RefreshToken.html":{}}}],["userinfo",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["userrole",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["users",{"_index":863,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1079,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":152,"title":{},"body":{"classes/AuditBaseEntity.html":{},"entities/RefreshToken.html":{}}}],["users/users.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":998,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":45,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1086,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":337,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstatus",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Pagination.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationMeta.html":{},"interfaces/PaginationOptions.html":{},"entities/User.html":{},"interfaces/UserFilter.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.active",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userstatus.inactive",{"_index":991,"title":{},"body":{"entities/User.html":{}}}],["using",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["utils/helpers/password.helper",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["v",{"_index":559,"title":{},"body":{"classes/DateHelper.html":{}}}],["validate",{"_index":718,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":721,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":858,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["validateuser",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/RefreshTokenDto.html":{},"classes/UserFilterDto.html":{},"dependencies.html":{}}}],["value",{"_index":184,"title":{},"body":{"injectables/AuditSubscriber.html":{},"injectables/AuthService.html":{},"classes/DateHelper.html":{},"injectables/JwtAuthGuard.html":{},"classes/PaginationDto.html":{},"classes/PasswordHelper.html":{},"classes/UserFilterDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":866,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserFilterDto.html":{}}}],["variable",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1345,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":770,"title":{},"body":{"controllers/MailController.html":{}}}],["version",{"_index":1337,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1286,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1276,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1289,"title":{},"body":{"index.html":{}}}],["việt",{"_index":578,"title":{},"body":{"classes/DateHelper.html":{}}}],["void",{"_index":177,"title":{},"body":{"injectables/AuditSubscriber.html":{},"classes/HttpExceptionFilter.html":{}}}],["vào",{"_index":540,"title":{},"body":{"classes/DateHelper.html":{}}}],["văn",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["watch",{"_index":1227,"title":{},"body":{"index.html":{}}}],["website",{"_index":1323,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["working",{"_index":1275,"title":{},"body":{"index.html":{}}}],["world",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1302,"title":{},"body":{"index.html":{}}}],["xem",{"_index":608,"title":{},"body":{"classes/DateHelper.html":{}}}],["xác",{"_index":763,"title":{},"body":{"controllers/MailController.html":{}}}],["y",{"_index":574,"title":{},"body":{"classes/DateHelper.html":{}}}],["year",{"_index":631,"title":{},"body":{"classes/DateHelper.html":{}}}],["yes",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":1316,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1236,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":569,"title":{},"body":{"classes/DateHelper.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\nimport { MailModule } from './mail/mail.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ThrottlerModule.forRoot({\n      throttlers: [\n        {\n          ttl: 60000,\n          limit: 10,\n        },\n      ],\n    }),\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_DATABASE'),\n        entities: ['dist/**/*.entity{.ts,.js}'],\n        synchronize: true,\n        timezone: '+07:00',\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditBaseEntity.html":{"url":"classes/AuditBaseEntity.html","title":"class - AuditBaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditBaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/audit-base.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                creator\n                            \n                            \n                                    \n                                    \n                                deleter\n                            \n                            \n                                    \n                                    \n                                updater\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'created_by'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/audit-base.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'deleted_by'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/audit-base.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updater\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'updated_by'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/audit-base.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseEntity:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamptz', name: 'deleted_at', nullable: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseEntity:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', name: 'deleted_by', nullable: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', name: 'updated_at', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseEntity:21\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity } from 'src/common/entities/base.entity';\nimport { ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\nexport class AuditBaseEntity extends BaseEntity {\n  // Relations (tùy chọn, có thể thêm khi cần)\n  @ManyToOne(() => User)\n  @JoinColumn({ name: 'created_by' })\n  creator: User;\n\n  @ManyToOne(() => User)\n  @JoinColumn({ name: 'updated_by' })\n  updater: User;\n\n  @ManyToOne(() => User)\n  @JoinColumn({ name: 'deleted_by' })\n  deleter: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditSubscriber.html":{"url":"injectables/AuditSubscriber.html","title":"injectable - AuditSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/subscribers/audit.subscriber.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beforeSoftRemove\n                            \n                            \n                                    Private\n                                getUserId\n                            \n                            \n                                listenTo\n                            \n                            \n                                    Private\n                                setDeletedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/subscribers/audit.subscriber.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beforeSoftRemove\n                        \n                    \n                \n            \n            \n                \nbeforeSoftRemove(event: SoftRemoveEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/subscribers/audit.subscriber.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            SoftRemoveEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/subscribers/audit.subscriber.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     number | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenTo\n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/subscribers/audit.subscriber.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDeletedBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDeletedBy(entity: BaseEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/subscribers/audit.subscriber.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            BaseEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AuditSubscriber.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/subscribers/audit.subscriber.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  EntitySubscriberInterface,\n  EventSubscriber,\n  // InsertEvent,\n  // UpdateEvent,\n  SoftRemoveEvent,\n} from 'typeorm';\nimport { BaseEntity } from '../entities/base.entity';\nimport { REQUEST } from '@nestjs/core';\nimport { Inject, Injectable, Scope, Logger } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\n@EventSubscriber()\nexport class AuditSubscriber implements EntitySubscriberInterface {\n  private readonly logger = new Logger(AuditSubscriber.name);\n\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n\n  listenTo() {\n    return BaseEntity;\n  }\n\n  // beforeInsert(event: InsertEvent) {\n  //   this.setCreatedBy(event.entity);\n  // }\n\n  // beforeUpdate(event: UpdateEvent) {\n  //   if (event.entity) {\n  //     this.setUpdatedBy(event.entity as BaseEntity);\n  //   }\n  // }\n\n  beforeSoftRemove(event: SoftRemoveEvent) {\n    if (event.entity) {\n      this.setDeletedBy(event.entity);\n    }\n  }\n\n  private getUserId(): number | undefined {\n    try {\n      const user = this.request.user;\n      if (user && typeof user === 'object' && 'id' in user) {\n        return Number(user.id);\n      }\n      return undefined;\n    } catch (error) {\n      this.logger.warn('Failed to extract user ID from request');\n      return undefined;\n    }\n  }\n\n  // private setCreatedBy(entity: BaseEntity): void {\n  //   const userId = this.getUserId();\n  //   if (userId !== undefined) {\n  //     entity.createdBy = userId;\n  //   }\n  // }\n\n  // private setUpdatedBy(entity: BaseEntity): void {\n  //   const userId = this.getUserId();\n  //   if (userId !== undefined) {\n  //     entity.updatedBy = userId;\n  //   }\n  // }\n\n  private setDeletedBy(entity: BaseEntity): void {\n    const userId = this.getUserId();\n    if (userId !== undefined) {\n      entity.deletedBy = userId;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiBearerAuth()@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Return user profile'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@UseGuards(ThrottlerGuard)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Return JWT access token and user info'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(user, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@HttpCode(HttpStatus.OK)@ApiBearerAuth()@ApiOperation({summary: 'User logout'})@ApiResponse({status: 200, description: 'Logout successful'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')@HttpCode(HttpStatus.OK)@ApiCookieAuth('refresh_token')@ApiOperation({summary: 'Refresh access token using httpOnly cookie'})@ApiResponse({status: 200, description: 'Return new access token'})@ApiResponse({status: 401, description: 'Invalid refresh token'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { CurrentUser } from './decorators/current-user.decorator';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiCookieAuth,\n} from '@nestjs/swagger';\nimport { Public } from './decorators/public.decorator';\nimport { ThrottlerGuard } from '@nestjs/throttler';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) { }\n\n  @Public()\n  @Post('login')\n  @UseGuards(ThrottlerGuard)\n  // @Throttle(5, 60000);\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return JWT access token and user info',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() loginDto: LoginDto,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    return this.authService.login(loginDto, response);\n  }\n\n  @Public()\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  @ApiCookieAuth('refresh_token')\n  @ApiOperation({ summary: 'Refresh access token using httpOnly cookie' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return new access token',\n  })\n  @ApiResponse({ status: 401, description: 'Invalid refresh token' })\n  async refreshTokens(\n    @Req() request: Request,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    return this.authService.refreshTokens(request, response);\n  }\n\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'User logout' })\n  @ApiResponse({ status: 200, description: 'Logout successful' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async logout(\n    @CurrentUser() user,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    return this.authService.logout(user.id, response);\n  }\n\n  @Get('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Return user profile' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  getProfile(@CurrentUser() user) {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from '../users/users.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { RefreshToken } from './entities/refresh-token.entity';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([RefreshToken]),\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN'),\n        },\n      }),\n    }),\n    ConfigModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getConfigNumber\n                            \n                            \n                                    Private\n                                getRefreshExpirationMs\n                            \n                            \n                                    Private\n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Private\n                                parseTimeToMs\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Private\n                                    Async\n                                storeRefreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, refreshTokenRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getConfigNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigNumber(key: string, defaultValue?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                defaultValue\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getRefreshExpirationMs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRefreshExpirationMs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTokens(user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: number, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseTimeToMs\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseTimeToMs(timeString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                timeString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(request: Request, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        storeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRefreshToken(userId: number, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:235\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfigService } from '@nestjs/config';\nimport { Request, Response } from 'express';\nimport { UsersService } from '../users/users.service';\nimport { PasswordHelper } from '../utils/helpers/password.helper';\nimport { RefreshToken } from './entities/refresh-token.entity';\nimport * as crypto from 'crypto';\nimport { LoginDto } from './dto/login.dto';\nimport { IUser } from 'src/users/user.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    @InjectRepository(RefreshToken)\n    private readonly refreshTokenRepository: Repository,\n  ) { }\n\n  private getConfigNumber(key: string, defaultValue?: number): number {\n    const value = this.configService.get(key);\n    if (value === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`Config key \"${key}\" is required but not provided`);\n    }\n    return parseInt(value, 10);\n  }\n\n  private parseTimeToMs(timeString: string): number {\n    const timeRegex = /^(\\d+)(d|h|m|s)$/;\n    const match = RegExp(timeRegex).exec(timeString);\n\n    if (match) {\n      const value = parseInt(match[1], 10);\n      const unit = match[2];\n\n      switch (unit) {\n        case 'd':\n          return value * 24 * 60 * 60 * 1000;\n        case 'h':\n          return value * 60 * 60 * 1000;\n        case 'm':\n          return value * 60 * 1000;\n        case 's':\n          return value * 1000;\n        default:\n          return value;\n      }\n    }\n\n    return parseInt(timeString, 10) * 1000;\n  }\n\n  private getRefreshExpirationMs(): number {\n    const refreshExpiresIn =\n      this.configService.get('JWT_REFRESH_EXPIRES_IN') || '7d';\n    if (\n      typeof refreshExpiresIn === 'string' &&\n      isNaN(Number(refreshExpiresIn))\n    ) {\n      return this.parseTimeToMs(refreshExpiresIn);\n    }\n\n    return parseInt(refreshExpiresIn as string, 10) * 1000;\n  }\n\n  async validateUser(email: string, password: string): Promise {\n    const user = await this.usersService.findByEmail(email);\n\n    if (user && (await PasswordHelper.compare(password, user.password))) {\n      const { password, ...userData } = user;\n\n      const userInfo: IUser = {\n        id: userData.id,\n        name: userData.name,\n        email: userData.email,\n        role: userData.role,\n      };\n\n      return userInfo;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto, response: Response) {\n    const { email, password } = loginDto;\n    const user = await this.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const tokens = await this.getTokens(user);\n    await this.storeRefreshToken(user.id, tokens.refreshToken);\n\n    const maxAge = this.getRefreshExpirationMs();\n\n    response.cookie('refreshToken', tokens.refreshToken, {\n      httpOnly: true,\n      secure: this.configService.get('NODE_ENV') === 'production',\n      sameSite: 'strict',\n      maxAge: maxAge,\n      path: '/api',\n    });\n\n    return {\n      accessToken: tokens.accessToken,\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      role: user.role,\n    };\n  }\n\n  async refreshTokens(request: Request, response: Response) {\n    const refreshToken = request.cookies['refreshToken'];\n\n    if (!refreshToken) {\n      throw new UnauthorizedException('Refresh token not found');\n    }\n\n    try {\n      const payload = this.jwtService.verify(refreshToken, {\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n      });\n\n      const storedToken = await this.refreshTokenRepository.findOne({\n        where: {\n          id: payload.jti,\n          userId: payload.id,\n          isActive: true,\n        },\n      });\n\n      if (!storedToken) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      const now = new Date();\n      if (storedToken.expiresAt \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', name: 'created_at', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamptz', name: 'deleted_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', name: 'deleted_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', name: 'updated_at', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class BaseEntity {\n  @CreateDateColumn({\n    type: 'timestamptz',\n    name: 'created_at',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  createdAt: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    name: 'updated_at',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  updatedAt: Date;\n\n  @DeleteDateColumn({\n    type: 'timestamptz',\n    name: 'deleted_at',\n    nullable: true,\n  })\n  deletedAt: Date;\n\n  @Column({\n    type: 'int',\n    name: 'deleted_by',\n    nullable: true,\n  })\n  deletedBy: number | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                bio\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                organization\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The avatar URL of the user', example: 'avatar.jpg', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The bio of the user', example: 'A passionate developer', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email of the user', example: 'user@gmail.com'})@IsEmail({}, {message: 'Invalid email format'})@IsNotEmpty({message: 'Email cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The full name of the user', example: 'Nguyễn Văn A'})@IsNotEmpty({message: 'Full name cannot be empty'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The organization of the user', example: 'HUST', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password of the user', example: '123456'})@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The phone number of the user', example: '0333338386', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The position of the user', example: 'Software Engineer', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The role of the user', example: undefined, enum: UserRole, default: undefined})@IsOptional()@IsEnum(UserRole)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The status of the user', example: undefined, enum: UserStatus, default: undefined})@IsOptional()@IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:93\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  IsOptional,\n  IsEnum,\n} from 'class-validator';\nimport { UserRole, UserStatus } from '../entities/user.entity';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'The email of the user',\n    example: 'user@gmail.com',\n  })\n  @IsEmail({}, { message: 'Invalid email format' })\n  @IsNotEmpty({ message: 'Email cannot be empty' })\n  email: string;\n\n  @ApiProperty({\n    description: 'The full name of the user',\n    example: 'Nguyễn Văn A',\n  })\n  @IsNotEmpty({ message: 'Full name cannot be empty' })\n  name: string;\n\n  @ApiProperty({\n    description: 'The password of the user',\n    example: '123456',\n  })\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    description: 'The position of the user',\n    example: 'Software Engineer',\n    required: false,\n  })\n  @IsOptional()\n  position?: string;\n\n  @ApiProperty({\n    description: 'The organization of the user',\n    example: 'HUST',\n    required: false,\n  })\n  @IsOptional()\n  organization?: string;\n\n  @ApiProperty({\n    description: 'The phone number of the user',\n    example: '0333338386',\n    required: false,\n  })\n  @IsOptional()\n  phone?: string;\n\n  @ApiProperty({\n    description: 'The avatar URL of the user',\n    example: 'avatar.jpg',\n    required: false,\n  })\n  @IsOptional()\n  avatarUrl?: string;\n\n  @ApiProperty({\n    description: 'The bio of the user',\n    example: 'A passionate developer',\n    required: false,\n  })\n  @IsOptional()\n  bio?: string;\n\n  @ApiProperty({\n    description: 'The role of the user',\n    example: UserRole.USER,\n    enum: UserRole,\n    default: UserRole.USER,\n  })\n  @IsOptional()\n  @IsEnum(UserRole)\n  role?: UserRole;\n\n  @ApiProperty({\n    description: 'The status of the user',\n    example: UserStatus.ACTIVE,\n    enum: UserStatus,\n    default: UserStatus.ACTIVE,\n  })\n  @IsOptional()\n  @IsEnum(UserStatus)\n  status?: UserStatus;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateHelper.html":{"url":"classes/DateHelper.html","title":"class - DateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/helpers/date.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                addDays\n                            \n                            \n                                    Static\n                                addHours\n                            \n                            \n                                    Static\n                                addMinutes\n                            \n                            \n                                    Static\n                                compareDate\n                            \n                            \n                                    Static\n                                formatDate\n                            \n                            \n                                    Static\n                                formatDateTime\n                            \n                            \n                                    Static\n                                formatDateVN\n                            \n                            \n                                    Static\n                                fromTimestamp\n                            \n                            \n                                    Static\n                                getDaysDifference\n                            \n                            \n                                    Static\n                                getFirstDayOfMonth\n                            \n                            \n                                    Static\n                                getLastDayOfMonth\n                            \n                            \n                                    Static\n                                isToday\n                            \n                            \n                                    Static\n                                now\n                            \n                            \n                                    Static\n                                parseDate\n                            \n                            \n                                    Static\n                                toTimestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        addDays\n                        \n                    \n                \n            \n            \n                \n                        \n                    addDays(date: Date, days: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:48\n                        \n                    \n\n\n            \n                \n                        Thêm ngày vào một ngày\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                days\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        addHours\n                        \n                    \n                \n            \n            \n                \n                        \n                    addHours(date: Date, hours: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:57\n                        \n                    \n\n\n            \n                \n                        Thêm giờ vào một ngày\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hours\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        addMinutes\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMinutes(date: Date, minutes: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:66\n                        \n                    \n\n\n            \n                \n                        Thêm phút vào một ngày\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                minutes\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        compareDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    compareDate(date1: Date, date2: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:88\n                        \n                    \n\n\n            \n                \n                        So sánh hai ngày (chỉ ngày, không tính giờ)\nTrả về: -1 nếu date1  date2\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date1\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                date2\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        formatDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatDate(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:12\n                        \n                    \n\n\n            \n                \n                        Định dạng ngày theo kiểu YYYY-MM-DD\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        formatDateTime\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatDateTime(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:34\n                        \n                    \n\n\n            \n                \n                        Định dạng ngày giờ đầy đủ\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        formatDateVN\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatDateVN(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:23\n                        \n                    \n\n\n            \n                \n                        Định dạng ngày theo kiểu DD/MM/YYYY (Việt Nam)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromTimestamp(timestamp: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:137\n                        \n                    \n\n\n            \n                \n                        Tạo Date từ timestamp (milliseconds)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                timestamp\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getDaysDifference\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDaysDifference(date1: Date, date2: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:144\n                        \n                    \n\n\n            \n                \n                        Lấy khoảng thời gian giữa hai ngày (tính bằng ngày)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date1\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                date2\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getFirstDayOfMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFirstDayOfMonth(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:111\n                        \n                    \n\n\n            \n                \n                        Lấy ngày đầu tiên của tháng\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    new Date()\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getLastDayOfMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastDayOfMonth(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:120\n                        \n                    \n\n\n            \n                \n                        Lấy ngày cuối cùng của tháng\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    new Date()\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isToday\n                        \n                    \n                \n            \n            \n                \n                        \n                    isToday(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:103\n                        \n                    \n\n\n            \n                \n                        Kiểm tra xem một ngày có phải là ngày hôm nay không\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        now\n                        \n                    \n                \n            \n            \n                \n                        \n                    now()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:5\n                        \n                    \n\n\n            \n                \n                        Lấy thời gian hiện tại\n\n\n                        \n                            Returns :         Date\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        parseDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseDate(dateString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:75\n                        \n                    \n\n\n            \n                \n                        Chuyển đổi từ chuỗi sang Date\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        toTimestamp\n                        \n                    \n                \n            \n            \n                \n                        \n                    toTimestamp(date: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/date.helper.ts:130\n                        \n                    \n\n\n            \n                \n                        Chuyển đổi Date sang timestamp (milliseconds)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class DateHelper {\n  /**\n   * Lấy thời gian hiện tại\n   */\n  static now(): Date {\n    return new Date();\n  }\n\n  /**\n   * Định dạng ngày theo kiểu YYYY-MM-DD\n   */\n  static formatDate(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n\n    return `${year}-${month}-${day}`;\n  }\n\n  /**\n   * Định dạng ngày theo kiểu DD/MM/YYYY (Việt Nam)\n   */\n  static formatDateVN(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n\n    return `${day}/${month}/${year}`;\n  }\n\n  /**\n   * Định dạng ngày giờ đầy đủ\n   */\n  static formatDateTime(date: Date): string {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n\n    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\n  }\n\n  /**\n   * Thêm ngày vào một ngày\n   */\n  static addDays(date: Date, days: number): Date {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Thêm giờ vào một ngày\n   */\n  static addHours(date: Date, hours: number): Date {\n    const result = new Date(date);\n    result.setHours(result.getHours() + hours);\n    return result;\n  }\n\n  /**\n   * Thêm phút vào một ngày\n   */\n  static addMinutes(date: Date, minutes: number): Date {\n    const result = new Date(date);\n    result.setMinutes(result.getMinutes() + minutes);\n    return result;\n  }\n\n  /**\n   * Chuyển đổi từ chuỗi sang Date\n   */\n  static parseDate(dateString: string): Date {\n    // Hỗ trợ cả định dạng ISO và DD/MM/YYYY\n    if (dateString.includes('/')) {\n      const [day, month, year] = dateString.split('/').map(Number);\n      return new Date(year, month - 1, day);\n    }\n    return new Date(dateString);\n  }\n\n  /**\n   * So sánh hai ngày (chỉ ngày, không tính giờ)\n   * Trả về: -1 nếu date1  date2\n   */\n  static compareDate(date1: Date, date2: Date): number {\n    const d1 = new Date(date1);\n    d1.setHours(0, 0, 0, 0);\n\n    const d2 = new Date(date2);\n    d2.setHours(0, 0, 0, 0);\n\n    if (d1.getTime()  d2.getTime()) return 1;\n    return 0;\n  }\n\n  /**\n   * Kiểm tra xem một ngày có phải là ngày hôm nay không\n   */\n  static isToday(date: Date): boolean {\n    const today = new Date();\n    return this.compareDate(date, today) === 0;\n  }\n\n  /**\n   * Lấy ngày đầu tiên của tháng\n   */\n  static getFirstDayOfMonth(date: Date = new Date()): Date {\n    const result = new Date(date);\n    result.setDate(1);\n    return result;\n  }\n\n  /**\n   * Lấy ngày cuối cùng của tháng\n   */\n  static getLastDayOfMonth(date: Date = new Date()): Date {\n    const result = new Date(date);\n    result.setMonth(result.getMonth() + 1);\n    result.setDate(0);\n    return result;\n  }\n\n  /**\n   * Chuyển đổi Date sang timestamp (milliseconds)\n   */\n  static toTimestamp(date: Date): number {\n    return date.getTime();\n  }\n\n  /**\n   * Tạo Date từ timestamp (milliseconds)\n   */\n  static fromTimestamp(timestamp: number): Date {\n    return new Date(timestamp);\n  }\n\n  /**\n   * Lấy khoảng thời gian giữa hai ngày (tính bằng ngày)\n   */\n  static getDaysDifference(date1: Date, date2: Date): number {\n    const d1 = new Date(date1);\n    d1.setHours(0, 0, 0, 0);\n\n    const d2 = new Date(date2);\n    d2.setHours(0, 0, 0, 0);\n\n    const diffTime = Math.abs(d2.getTime() - d1.getTime());\n    return Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/filters/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    response.status(status).json({\n      statusCode: status,\n      message:\n        typeof exceptionResponse === 'object'\n          ? (exceptionResponse as any).message\n          : exceptionResponse,\n      path: request.url,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUser {\n  id: number;\n  name: string;\n  email: string;\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user) {\n    if (err || !user) {\n      throw (\n        err ||\n        new UnauthorizedException(\n          'Token is invalid or BearerToken value not provided',\n        )\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { UsersService } from '../../users/users.service';\nimport { ConfigService } from '@nestjs/config';\nimport { IUser } from 'src/users/user.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET') || 'kas2k3',\n    });\n  }\n\n  async validate(payload: IUser) {\n    const user = await this.usersService.findOne(payload.id);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const { id, name, email, role } = payload;\n    return {\n      id,\n      name,\n      email,\n      role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email', example: 'phuochavinh@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: '123456'})@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'User email',\n    example: 'phuochavinh@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: '123456',\n  })\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MailController.html":{"url":"controllers/MailController.html","title":"controller - MailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mail\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                handleTestEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        handleTestEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTestEmail()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Public()@ResponseMessage('Test email')\n                \n            \n\n                    \n                        \n                            Defined in src/mail/mail.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { Public } from 'src/auth/decorators/public.decorator';\nimport { ResponseMessage } from 'src/common/decorators/response-message.decorator';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Controller('mail')\nexport class MailController {\n  constructor(\n    private readonly mailService: MailService,\n    private readonly mailerService: MailerService,\n  ) { }\n\n  @Get()\n  @Public()\n  // @Cron(CronExpression.EVERY_30_SECONDS)\n  @ResponseMessage('Test email')\n  async handleTestEmail() {\n    await this.mailerService.sendMail({\n      to: 'phuoc17032003@gmail.com',\n      from: '\"Support Team\" ',\n      subject: 'Xác minh tài khoản của bạn',\n      template: 'account-verification',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService\n\nMailService\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MailController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailController } from './mail.controller';\nimport { ConfigService } from '@nestjs/config';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        transport: {\n          host: configService.get('EMAIL_HOST'),\n          // port: configService.get('EMAIL_PORT'),\n          secure: false,\n          auth: {\n            user: configService.get('EMAIL_AUTH_USER'),\n            pass: configService.get('EMAIL_AUTH_PASS'),\n          },\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n        preview:\n          configService.get('EMAIL_PREVIEW') === 'true' ? true : false,\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [MailController],\n  providers: [MailService],\n})\nexport class MailModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class MailService {\n  constructor(\n    private readonly mailerService: MailerService,\n    private readonly configService: ConfigService,\n  ) { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pagination.html":{"url":"interfaces/Pagination.html","title":"interface - Pagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Pagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/pagination.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         PaginationMeta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationMeta\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserStatus } from 'src/users/entities/user.entity';\nimport { SortOrder } from '../dto/pagination-options.dto';\n\nexport interface UserFilter {\n  roleNames?: string[];\n  statuses?: UserStatus[];\n  [key: string]: any;\n}\n\nexport interface PaginationOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  searchFields?: string[];\n  filter?: UserFilter;\n  sortBy?: string;\n  sortOrder?: SortOrder;\n}\n\nexport interface PaginationMeta {\n  totalItems: number;\n  itemCount: number;\n  itemsPerPage: number;\n  totalPages: number;\n  currentPage: number;\n}\n\nexport interface Pagination {\n  items: T[];\n  meta: PaginationMeta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                filter\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                            \n                                    \n                                    \n                                    \n                                sortOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserFilterDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter options for roles and statuses.', type: UserFilterDto})@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The number of items per page (default: 10). Minimum is 1, maximum is 100.', default: 10})@IsOptional()@Type(undefined)@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The current page number (default: 1). Minimum value is 1.', default: 1})@IsOptional()@Type(undefined)@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Search keyword to filter results based on relevant fields (e.g., name, email).', example: 'john'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'createdAt'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Field to sort by (default: createdAt)', example: 'createdAt'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sortOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortOrder\n\n                    \n                \n                \n                    \n                        Default value : SortOrder.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Sort order of the results: ascending (ASC) or descending (DESC).', enum: SortOrder, default: undefined})@IsOptional()@IsEnum(SortOrder)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:94\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsInt,\n  Min,\n  Max,\n  IsString,\n  IsEnum,\n  ValidateNested,\n  IsArray,\n} from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { UserStatus } from 'src/users/entities/user.entity';\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport class UserFilterDto {\n  @ApiPropertyOptional({\n    description: 'Filter users by role names. Multiple values can be selected.',\n    isArray: true,\n    example: ['ADMIN', 'USER'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @Transform(({ value }) => (Array.isArray(value) ? value : [value]))\n  roleNames?: string[];\n\n  @ApiPropertyOptional({\n    description:\n      'Filter users by account status. Multiple values can be selected.',\n    enum: UserStatus,\n    isArray: true,\n    example: ['ACTIVE', 'SUSPENDED'],\n  })\n  @IsOptional()\n  @IsEnum(UserStatus, { each: true })\n  @Transform(({ value }) => (Array.isArray(value) ? value : [value]))\n  statuses?: UserStatus[];\n}\n\nexport class PaginationDto {\n  @ApiPropertyOptional({\n    description: 'The current page number (default: 1). Minimum value is 1.',\n    default: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page: number = 1;\n\n  @ApiPropertyOptional({\n    description:\n      'The number of items per page (default: 10). Minimum is 1, maximum is 100.',\n    default: 10,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit: number = 10;\n\n  @ApiPropertyOptional({\n    description:\n      'Search keyword to filter results based on relevant fields (e.g., name, email).',\n    example: 'john',\n  })\n  @IsString()\n  @IsOptional()\n  search?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filter options for roles and statuses.',\n    type: UserFilterDto,\n  })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => UserFilterDto)\n  filter?: UserFilterDto;\n\n  @ApiPropertyOptional({\n    description:\n      'Sort order of the results: ascending (ASC) or descending (DESC).',\n    enum: SortOrder,\n    default: SortOrder.DESC,\n  })\n  @IsOptional()\n  @IsEnum(SortOrder)\n  sortOrder: SortOrder = SortOrder.DESC;\n\n  @ApiPropertyOptional({\n    description: 'Field to sort by (default: createdAt)',\n    example: 'createdAt',\n  })\n  @IsString()\n  @IsOptional()\n  sortBy?: string = 'createdAt';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMeta.html":{"url":"interfaces/PaginationMeta.html","title":"interface - PaginationMeta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMeta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/pagination.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentPage\n                                        \n                                \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            itemsPerPage\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserStatus } from 'src/users/entities/user.entity';\nimport { SortOrder } from '../dto/pagination-options.dto';\n\nexport interface UserFilter {\n  roleNames?: string[];\n  statuses?: UserStatus[];\n  [key: string]: any;\n}\n\nexport interface PaginationOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  searchFields?: string[];\n  filter?: UserFilter;\n  sortBy?: string;\n  sortOrder?: SortOrder;\n}\n\nexport interface PaginationMeta {\n  totalItems: number;\n  itemCount: number;\n  itemsPerPage: number;\n  totalPages: number;\n  currentPage: number;\n}\n\nexport interface Pagination {\n  items: T[];\n  meta: PaginationMeta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationOptions.html":{"url":"interfaces/PaginationOptions.html","title":"interface - PaginationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/pagination.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            filter\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            searchFields\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortOrder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:         UserFilter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserFilter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchFields:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortOrder:         SortOrder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortOrder\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserStatus } from 'src/users/entities/user.entity';\nimport { SortOrder } from '../dto/pagination-options.dto';\n\nexport interface UserFilter {\n  roleNames?: string[];\n  statuses?: UserStatus[];\n  [key: string]: any;\n}\n\nexport interface PaginationOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  searchFields?: string[];\n  filter?: UserFilter;\n  sortBy?: string;\n  sortOrder?: SortOrder;\n}\n\nexport interface PaginationMeta {\n  totalItems: number;\n  itemCount: number;\n  itemsPerPage: number;\n  totalPages: number;\n  currentPage: number;\n}\n\nexport interface Pagination {\n  items: T[];\n  meta: PaginationMeta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordHelper.html":{"url":"classes/PasswordHelper.html","title":"class - PasswordHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/helpers/password.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                compare\n                            \n                            \n                                    Static\n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(password: string | undefined, hashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/password.helper.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(password: string | undefined, saltRounds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/helpers/password.helper.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                saltRounds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nexport class PasswordHelper {\n  static async hash(\n    password: string | undefined,\n    saltRounds = 10,\n  ): Promise {\n    if (!password) {\n      throw new Error('Password is required for hashing');\n    }\n    return bcrypt.hash(password, saltRounds);\n  }\n\n  static async compare(\n    password: string | undefined,\n    hashedPassword: string,\n  ): Promise {\n    if (!password) {\n      return false;\n    }\n    return bcrypt.compare(password, hashedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RefreshToken.html":{"url":"entities/RefreshToken.html","title":"entity - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/refresh-token.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamptz', name: 'expires_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/refresh-token.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/refresh-token.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/refresh-token.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'userId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/refresh-token.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/refresh-token.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  PrimaryColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\nimport { BaseEntity } from 'src/common/entities/base.entity';\n\n@Entity('refresh_tokens')\n@Index(['userId', 'isActive'])\nexport class RefreshToken extends BaseEntity {\n  @PrimaryColumn('uuid')\n  id: string;\n\n  @Column()\n  @Index()\n  userId: number;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @Column({\n    type: 'timestamptz',\n    name: 'expires_at',\n    nullable: true,\n  })\n  expiresAt: Date;\n\n  @ManyToOne(() => User)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'Refresh token',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n  })\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RESPONSE_MESSAGE } from '../decorators/response-message.decorator';\n\nexport const SKIP_TRANSFORM_INTERCEPTOR = 'skipTransformInterceptor';\n\nexport function SkipTransformInterceptor() {\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\n    Reflect.defineMetadata(SKIP_TRANSFORM_INTERCEPTOR, true, descriptor.value);\n    return descriptor;\n  };\n}\n\nexport interface Response {\n  data: T;\n  statusCode: number;\n  message: string;\n  timestamp: string;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  constructor(private readonly reflector: Reflector) { }\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const handler = context.getHandler();\n    const skipInterceptor = this.reflector.get(\n      SKIP_TRANSFORM_INTERCEPTOR,\n      handler,\n    );\n\n    if (skipInterceptor) {\n      return next.handle();\n    }\n\n    const customMessage = this.reflector.get(RESPONSE_MESSAGE, handler);\n\n    const request = context.switchToHttp().getRequest();\n\n    return next.handle().pipe(\n      map((data) => {\n        const response = context.switchToHttp().getResponse();\n        const statusCode = response.statusCode;\n\n        if (data === null || data === undefined) {\n          if (request.method === 'DELETE') {\n            return {\n              data: null,\n              statusCode: statusCode,\n              message: 'Deleted successfully',\n              timestamp: new Date().toISOString(),\n            };\n          }\n\n          return {\n            data: null,\n            statusCode: statusCode,\n            message: this.getDefaultMessageForStatusCode(statusCode),\n            timestamp: new Date().toISOString(),\n          };\n        }\n\n        const message =\n          customMessage ||\n          data.message ||\n          this.getDefaultMessageForStatusCode(statusCode);\n\n        const responseData = data.data !== undefined ? data.data : data;\n\n        return {\n          data: responseData,\n          statusCode: statusCode,\n          message: message,\n          timestamp: new Date().toISOString(),\n        };\n      }),\n    );\n  }\n\n  private getDefaultMessageForStatusCode(statusCode: number): string {\n    switch (statusCode) {\n      case 200:\n        return 'Success';\n      case 201:\n        return 'Created';\n      case 202:\n        return 'Accepted';\n      case 204:\n        return 'No Content';\n      default:\n        return 'Success';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getDefaultMessageForStatusCode\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/transform.interceptor.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getDefaultMessageForStatusCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDefaultMessageForStatusCode(statusCode: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RESPONSE_MESSAGE } from '../decorators/response-message.decorator';\n\nexport const SKIP_TRANSFORM_INTERCEPTOR = 'skipTransformInterceptor';\n\nexport function SkipTransformInterceptor() {\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\n    Reflect.defineMetadata(SKIP_TRANSFORM_INTERCEPTOR, true, descriptor.value);\n    return descriptor;\n  };\n}\n\nexport interface Response {\n  data: T;\n  statusCode: number;\n  message: string;\n  timestamp: string;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  constructor(private readonly reflector: Reflector) { }\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const handler = context.getHandler();\n    const skipInterceptor = this.reflector.get(\n      SKIP_TRANSFORM_INTERCEPTOR,\n      handler,\n    );\n\n    if (skipInterceptor) {\n      return next.handle();\n    }\n\n    const customMessage = this.reflector.get(RESPONSE_MESSAGE, handler);\n\n    const request = context.switchToHttp().getRequest();\n\n    return next.handle().pipe(\n      map((data) => {\n        const response = context.switchToHttp().getResponse();\n        const statusCode = response.statusCode;\n\n        if (data === null || data === undefined) {\n          if (request.method === 'DELETE') {\n            return {\n              data: null,\n              statusCode: statusCode,\n              message: 'Deleted successfully',\n              timestamp: new Date().toISOString(),\n            };\n          }\n\n          return {\n            data: null,\n            statusCode: statusCode,\n            message: this.getDefaultMessageForStatusCode(statusCode),\n            timestamp: new Date().toISOString(),\n          };\n        }\n\n        const message =\n          customMessage ||\n          data.message ||\n          this.getDefaultMessageForStatusCode(statusCode);\n\n        const responseData = data.data !== undefined ? data.data : data;\n\n        return {\n          data: responseData,\n          statusCode: statusCode,\n          message: message,\n          timestamp: new Date().toISOString(),\n        };\n      }),\n    );\n  }\n\n  private getDefaultMessageForStatusCode(statusCode: number): string {\n    switch (statusCode) {\n      case 200:\n        return 'Success';\n      case 201:\n        return 'Created';\n      case 202:\n        return 'Accepted';\n      case 204:\n        return 'No Content';\n      default:\n        return 'Success';\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CreateUserDto, [\n  'password',\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends OmitType(CreateUserDto, [\n  'password',\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                    \n                                    Optional\n                                bio\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                organization\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from 'src/common/entities/base.entity';\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\nexport enum UserRole {\n  ADMIN = 'ADMIN',\n  USER = 'USER',\n  ORGANIZER = 'ORGANIZER',\n}\n\nexport enum UserStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\n@Entity('users')\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  name: string;\n\n  @Column({ nullable: true })\n  position?: string;\n\n  @Column({ nullable: true })\n  organization?: string;\n\n  @Column({ nullable: true })\n  phone?: string;\n\n  @Column({ nullable: true })\n  avatarUrl?: string;\n\n  @Column({ type: 'text', nullable: true })\n  bio?: string;\n\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    default: UserRole.USER,\n  })\n  role: UserRole;\n\n  @Column({\n    type: 'enum',\n    enum: UserStatus,\n    default: UserStatus.INACTIVE,\n  })\n  status: UserStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserFilter.html":{"url":"interfaces/UserFilter.html","title":"interface - UserFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/pagination.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            roleNames\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statuses\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/common/interfaces/pagination.interface.ts:6\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        roleNames\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roleNames:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statuses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statuses:         UserStatus[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserStatus[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserStatus } from 'src/users/entities/user.entity';\nimport { SortOrder } from '../dto/pagination-options.dto';\n\nexport interface UserFilter {\n  roleNames?: string[];\n  statuses?: UserStatus[];\n  [key: string]: any;\n}\n\nexport interface PaginationOptions {\n  page?: number;\n  limit?: number;\n  search?: string;\n  searchFields?: string[];\n  filter?: UserFilter;\n  sortBy?: string;\n  sortOrder?: SortOrder;\n}\n\nexport interface PaginationMeta {\n  totalItems: number;\n  itemCount: number;\n  itemsPerPage: number;\n  totalPages: number;\n  currentPage: number;\n}\n\nexport interface Pagination {\n  items: T[];\n  meta: PaginationMeta;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFilterDto.html":{"url":"classes/UserFilterDto.html","title":"class - UserFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleNames\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                statuses\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        roleNames\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter users by role names. Multiple values can be selected.', isArray: true, example: undefined})@IsOptional()@IsArray()@IsString({each: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        statuses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filter users by account status. Multiple values can be selected.', enum: UserStatus, isArray: true, example: undefined})@IsOptional()@IsEnum(UserStatus, {each: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-options.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsInt,\n  Min,\n  Max,\n  IsString,\n  IsEnum,\n  ValidateNested,\n  IsArray,\n} from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { UserStatus } from 'src/users/entities/user.entity';\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport class UserFilterDto {\n  @ApiPropertyOptional({\n    description: 'Filter users by role names. Multiple values can be selected.',\n    isArray: true,\n    example: ['ADMIN', 'USER'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @Transform(({ value }) => (Array.isArray(value) ? value : [value]))\n  roleNames?: string[];\n\n  @ApiPropertyOptional({\n    description:\n      'Filter users by account status. Multiple values can be selected.',\n    enum: UserStatus,\n    isArray: true,\n    example: ['ACTIVE', 'SUSPENDED'],\n  })\n  @IsOptional()\n  @IsEnum(UserStatus, { each: true })\n  @Transform(({ value }) => (Array.isArray(value) ? value : [value]))\n  statuses?: UserStatus[];\n}\n\nexport class PaginationDto {\n  @ApiPropertyOptional({\n    description: 'The current page number (default: 1). Minimum value is 1.',\n    default: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  page: number = 1;\n\n  @ApiPropertyOptional({\n    description:\n      'The number of items per page (default: 10). Minimum is 1, maximum is 100.',\n    default: 10,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit: number = 10;\n\n  @ApiPropertyOptional({\n    description:\n      'Search keyword to filter results based on relevant fields (e.g., name, email).',\n    example: 'john',\n  })\n  @IsString()\n  @IsOptional()\n  search?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filter options for roles and statuses.',\n    type: UserFilterDto,\n  })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => UserFilterDto)\n  filter?: UserFilterDto;\n\n  @ApiPropertyOptional({\n    description:\n      'Sort order of the results: ascending (ASC) or descending (DESC).',\n    enum: SortOrder,\n    default: SortOrder.DESC,\n  })\n  @IsOptional()\n  @IsEnum(SortOrder)\n  sortOrder: SortOrder = SortOrder.DESC;\n\n  @ApiPropertyOptional({\n    description: 'Field to sort by (default: createdAt)',\n    example: 'createdAt',\n  })\n  @IsString()\n  @IsOptional()\n  sortBy?: string = 'createdAt';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                hardRemove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                restore\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'The user has been successfully created.'})@ApiResponse({status: 400, description: 'Bad Request.'})@ResponseMessage('User created successfully')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationDto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthGuard)@ApiBearerAuth()@ApiOperation({summary: 'Get all users with pagination (Admin only)'})@ResponseMessage('Users retrieved successfully')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth()@ApiOperation({summary: 'Get user by id'})@Get(':id')@ResponseMessage('User retrieved successfully')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        hardRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardRemove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/hard')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Hard delete a user'})@ApiResponse({status: 200, description: 'The user has been permanently deleted.'})@ApiResponse({status: 404, description: 'User not found.'})@ResponseMessage('User permanently deleted')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiBearerAuth()@Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Soft delete a user'})@ApiResponse({status: 200, description: 'The user has been soft deleted.'})@ApiResponse({status: 404, description: 'User not found.'})@ResponseMessage('User deleted successfully')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        restore\n                        \n                    \n                \n            \n            \n                \n                        \n                    restore(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/restore')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Restore a soft-deleted user'})@ApiResponse({status: 200, description: 'The user has been restored.'})@ApiResponse({status: 404, description: 'User not found.'})@ResponseMessage('User restored successfully')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiBearerAuth()@ApiOperation({summary: 'Update user by id'})@ResponseMessage('User updated successfully')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n  Query,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { CurrentUser } from 'src/auth/decorators/current-user.decorator';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { PaginationDto } from 'src/common/dto/pagination-options.dto';\nimport { Pagination } from 'src/common/interfaces/pagination.interface';\nimport { ResponseMessage } from 'src/common/decorators/response-message.decorator';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) { }\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({\n    status: 201,\n    description: 'The user has been successfully created.',\n  })\n  @ApiResponse({ status: 400, description: 'Bad Request.' })\n  @ResponseMessage('User created successfully')\n  async create(@Body() createUserDto: CreateUserDto) {\n    const user = await this.usersService.create(createUserDto);\n    return user;\n  }\n\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get all users with pagination (Admin only)' })\n  @ResponseMessage('Users retrieved successfully')\n  async findAll(\n    @Query() paginationDto: PaginationDto,\n  ): Promise> {\n    return this.usersService.findAll(paginationDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get user by id' })\n  @Get(':id')\n  @ResponseMessage('User retrieved successfully')\n  async findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user by id' })\n  @ResponseMessage('User updated successfully')\n  async update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Soft delete a user' })\n  @ApiResponse({ status: 200, description: 'The user has been soft deleted.' })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ResponseMessage('User deleted successfully')\n  async remove(\n    @Param('id', ParseIntPipe) id: number,\n    @CurrentUser() user: User,\n  ) {\n    await this.usersService.remove(id, user.id);\n    return null;\n  }\n\n  @Delete(':id/hard')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Hard delete a user' })\n  @ApiResponse({\n    status: 200,\n    description: 'The user has been permanently deleted.',\n  })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ResponseMessage('User permanently deleted')\n  async hardRemove(@Param('id', ParseIntPipe) id: number) {\n    await this.usersService.hardRemove(id);\n    return null;\n  }\n\n  @Post(':id/restore')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Restore a soft-deleted user' })\n  @ApiResponse({ status: 200, description: 'The user has been restored.' })\n  @ApiResponse({ status: 404, description: 'User not found.' })\n  @ResponseMessage('User restored successfully')\n  async restore(@Param('id', ParseIntPipe) id: number) {\n    await this.usersService.restore(id);\n    return null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithDeleted\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                hardRemove\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                restore\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationDto: PaginationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllWithDeleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllWithDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hardRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, deletedBy?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                deletedBy\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        restore\n                        \n                    \n                \n            \n            \n                \n                        \n                    restore(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { PasswordHelper } from 'src/utils/helpers/password.helper';\nimport { ErrorMessages } from 'src/utils/constants/error-messages.constant';\nimport { PaginationDto } from 'src/common/dto/pagination-options.dto';\nimport { createPagination } from 'src/utils/helpers/pagination.helper';\nimport { Pagination } from 'src/common/interfaces/pagination.interface';\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) { }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    // const { email, password } = createUserDto;\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ConflictException(ErrorMessages.USER.EMAIL_EXISTS);\n    }\n\n    if (!createUserDto.password) {\n      throw new BadRequestException('Password is required');\n    }\n\n    const hashedPassword = await PasswordHelper.hash(createUserDto.password);\n    createUserDto.password = hashedPassword;\n    this.usersRepository.create(createUserDto);\n    const user = this.usersRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    return this.usersRepository.save(user);\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n\n    if (!user) {\n      throw new NotFoundException(ErrorMessages.USER.NOT_FOUND);\n    }\n\n    return user;\n  }\n\n  async findAll(paginationDto: PaginationDto): Promise> {\n    return createPagination(this.usersRepository, {\n      ...paginationDto,\n      searchFields: ['name', 'email'],\n    });\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n    });\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.findOne(id);\n\n    if (updateUserDto.email && updateUserDto.email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email: updateUserDto.email },\n      });\n\n      if (existingUser) {\n        throw new ConflictException(ErrorMessages.USER.EMAIL_EXISTS);\n      }\n    }\n\n    Object.assign(user, updateUserDto);\n\n    return this.usersRepository.save(user);\n  }\n\n  async remove(id: number, deletedBy?: number): Promise {\n    if (deletedBy) {\n      await this.usersRepository.update(id, { deletedBy });\n    }\n\n    const result = await this.usersRepository.softDelete(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(ErrorMessages.USER.NOT_FOUND);\n    }\n  }\n\n  async hardRemove(id: number): Promise {\n    const result = await this.usersRepository.delete(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(ErrorMessages.USER.NOT_FOUND);\n    }\n  }\n\n  async restore(id: number) {\n    await this.usersRepository.update({ id }, { deletedBy: null });\n\n    const result = await this.usersRepository.restore(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(ErrorMessages.USER.NOT_FOUND);\n    }\n  }\n\n  async findAllWithDeleted(): Promise {\n    return this.usersRepository.find({\n      withDeleted: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/entities/refresh-token.entity.ts\n            \n            entity\n            RefreshToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/refresh-token.entity.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/decorators/response-message.decorator.ts\n            \n            variable\n            RESPONSE_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/response-message.decorator.ts\n            \n            variable\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/pagination-options.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/dto/pagination-options.dto.ts\n            \n            class\n            UserFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/entities/audit-base.entity.ts\n            \n            class\n            AuditBaseEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/interceptors/transform.interceptor.ts\n            \n            function\n            SkipTransformInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/interceptors/transform.interceptor.ts\n            \n            variable\n            SKIP_TRANSFORM_INTERCEPTOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/pagination.interface.ts\n            \n            interface\n            Pagination\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/pagination.interface.ts\n            \n            interface\n            PaginationMeta\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/interfaces/pagination.interface.ts\n            \n            interface\n            PaginationOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/interfaces/pagination.interface.ts\n            \n            interface\n            UserFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/subscribers/audit.subscriber.ts\n            \n            injectable\n            AuditSubscriber\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/mail/mail.controller.ts\n            \n            controller\n            MailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/utils/constants/error-messages.constant.ts\n            \n            variable\n            ErrorMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/helpers/date.helper.ts\n            \n            class\n            DateHelper\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                        src/utils/helpers/pagination.helper.ts\n            \n            function\n            createPagination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/helpers/password.helper.ts\n            \n            class\n            PasswordHelper\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/utils/types/common.types.ts\n            \n            type alias\n            PaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/types/common.types.ts\n            \n            type alias\n            PaginationParams\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/schedule : ^5.0.1\n        \n            @nestjs/swagger : ^11.0.6\n        \n            @nestjs/throttler : ^6.4.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            ejs : ^3.1.10\n        \n            handlebars : ^4.7.8\n        \n            helmet : ^8.1.0\n        \n            nodemailer : ^6.10.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.13.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.21\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../roles.decorator.ts)\n                        \n                        \n                            SortOrder   (src/.../pagination-options.dto.ts)\n                        \n                        \n                            UserRole   (src/.../user.entity.ts)\n                        \n                        \n                            UserStatus   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/decorators/roles.decorator.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/common/dto/pagination-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        SortOrder\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/users/entities/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ORGANIZER\n                            \n                        \n                        \n                            \n                                Value : ORGANIZER\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : INACTIVE\n                            \n                        \n                        \n                            \n                                 SUSPENDED\n                            \n                        \n                        \n                            \n                                Value : SUSPENDED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createPagination   (src/.../pagination.helper.ts)\n                        \n                        \n                            SkipTransformInterceptor   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/helpers/pagination.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createPagination\n                        \n                    \n                \n            \n            \n                \ncreatePagination(repositoryOrQueryBuilder, options: PaginationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                repositoryOrQueryBuilder\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            PaginationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/interceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SkipTransformInterceptor\n                        \n                    \n                \n            \n            \n                \nSkipTransformInterceptor()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Kas\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PaginatedResponse   (src/.../common.types.ts)\n                        \n                        \n                            PaginationParams   (src/.../common.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/types/common.types.ts\n    \n    \n        \n            \n                \n                    \n                    PaginatedResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PaginationParams\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            ErrorMessages   (src/.../error-messages.constant.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSE_MESSAGE   (src/.../response-message.decorator.ts)\n                        \n                        \n                            ResponseMessage   (src/.../response-message.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SKIP_TRANSFORM_INTERCEPTOR   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/utils/constants/error-messages.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ErrorMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  USER: {\n    NOT_FOUND: 'User not found',\n    EMAIL_EXISTS: 'Email already exists',\n    INVALID_CREDENTIALS: 'Invalid credentials',\n  },\n  VALIDATION: {\n    INVALID_EMAIL: 'Invalid email format',\n    PASSWORD_TOO_SHORT: 'Password must be at least 6 characters',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/response-message.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RESPONSE_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'response_message'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (message: string) =>\n  SetMetadata(RESPONSE_MESSAGE, message)\n                    \n                \n\n\n        \n    \n\n    src/utils/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/common/interceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SKIP_TRANSFORM_INTERCEPTOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'skipTransformInterceptor'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
